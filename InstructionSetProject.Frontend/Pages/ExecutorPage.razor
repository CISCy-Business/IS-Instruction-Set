@page "/executor"
@using InstructionSetProject.Backend;
@using InstructionSetProject.Backend.StaticFrontend;
@using InstructionSetProject.Backend.StaticPipeline;
@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using System.ComponentModel
@using InstructionSetProject.Backend.InstructionTypes
@using DiagramShapes = Syncfusion.Blazor.Diagram.Shapes
@using DiagramSegments = Syncfusion.Blazor.Diagram.ConnectorSegmentType
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime

<style>
    #inputFile {
        transform: translateY(10px);
        font-size: 14px;
        margin-left: 5px;
        width: 93px;
        border: 1px solid black;
        font-family: revert !important;
    }

    SfSplitter {
        border: none;
    }

    #innerSplitter {
        border: none;
    }

    #mainSplitter {
        border: none;
    }

    .codeDiv {
        padding-right: 5px;
    }

    .registerPane {
        padding: 0px 5px 0px 5px;
        margin-bottom: 50px;
    }

    .ioPane {
        padding: 5px 5px 0px 5px;
    }

    .e-splitter .e-split-bar.e-split-bar-horizontal.e-split-bar-hover,
    .e-splitter .e-split-bar.e-split-bar-horizontal.e-split-bar-active {
        background: blue;
    }

    .e-splitter .e-split-bar.e-split-bar-horizontal{
        background: #20639B;
    }

    .special {
        color:#D6665D;
    }

    .dark-mode-executor-code-input {
        background-color: #002833 !important;
        color: #DEB992;
        font-family: 'Courier New', sans-serif;
    }

    .dark-mode-executor-textarea {
        background-color: black !important;
        color: #adadad !important;
    }

    .dark-mode-executor-btn {
        background-color: #051622;
        color: #adadad;
        border: 2px solid #003033;
    }

    .dark-mode-executor-btn:hover {
        background-color: #004a52;
        color: #adadad;
        border: 2px solid #003033;
    }

    .dark-mode-executor-register-label {
        color: #adadad !important;
    }

    .dark-mode-executor-register-pane {
        color: #adadad !important;
        background-color: black !important;
    }

    .e-sizing .e-tbar-btn-text {
        font-size: 22px;
    }

    .modalDivEx {
        position: absolute;
        top: 10%;
        transform: translate(160px, -50%);
    }

    .modalDivEx1 {
        position: absolute;
        top: 25%;
        transform: translate(10px, -50%);
    }

    .modalExBtn {
        position: absolute;
        top: 90%;
        transform: translate(180px, -50%);
        background-color: #20639B;
        color: white;
    }

    .modalDivEx2 {
        position: absolute;
        top: 55%;
        transform: translate(85px, -50%);
    }

    ::-webkit-scrollbar {
        display: none;
    }

    .monacoEditorCSS {
        margin-top: 10px;
        width: 100%;
        height: 500px;
        border: 2px solid gray;
    }

</style>

<Modal @bind-Open="IsModalOpened" Close="OnClose">
    <form class="modalForm" method="dialog" style="width: 400px; height: 500px; align-content: flex-start">
        <div class="modalDivEx">
            <span style="font-size: 24px">Settings</span>
        </div>
        <div class="modalDivEx1">
            <label class="staticLabel" style="transform: translateY(-35px); font-family: monospace">@(StaticMode == true ? "Static" : "Dynamic") -> </label>
            <label class="switch">
                <input type="checkbox" class="inputCheckbox" @onchange="toggleStaticDynamicMode">
                <span class="slider round"  style="transform: translateY(-18px)"></span>
            </label>
        </div>
        <!-- Add a stage legend right here in this spot where this comment is located-->
        @if(StaticMode == true)
        {
            <div class="modalDivEx2">
                <p class="bg-fetch" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Fetch</b></p>
                <p class="bg-decode" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Decode</b></p>
                <p class="bg-execute" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Execute</b></p>
                <p class="bg-memory" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Memory</b></p>
                <p class="bg-write" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>WriteBack</b></p>
            </div>
        }
        else if(StaticMode == false)
        {
            <div class="modalDivEx2">
                <p class="bg-fetch" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Issue</b></p>
                <p class="bg-decode" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Execute</b></p>
                <p class="bg-execute" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Read</b></p>
                <p class="bg-memory" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Write</b></p>
                <p class="bg-write" style="color: white; font-family: monospace; font-size: 20px; width: 200px; transform: translateX(15px); text-align: center"><b>Commit</b></p>
            </div>
        }

         <button class="modalExBtn" value="cancel">Close</button>
    </form>
</Modal>

<div class="code_input_executor">
    <div class="code_input_wrapper">
        <div>
            <SfToolbar Height="65px">
                <ToolbarItems>
                    <ToolbarItem PrefixIcon="e-icons e-settings" Text="Build" OnClick="buildCode" TooltipText="Build the source/machine code prior to running"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-icons e-chevron-right-fill" Text="Run" Type="ItemType.Button" OnClick="runCode" TooltipText="Run the code"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-icons e-properties-1" Text="Debug" TooltipText="Start debugging the code" OnClick="Debug"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-icons e-clock" Text="Clock Tick" OnClick="ClockTick" TooltipText="Perform on clock tick" Disabled="@(SPEx == null || (SPEx.fetchingInstruction == null && SPEx.executingInstruction == null && SPEx.decodingInstruction == null && SPEx.memoryInstruction == null && SPEx.writingBackInstruction == null))"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-icons e-text-wrap" Text="Step" OnClick="step" TooltipText="Step through each line of code upon debugging" Disabled="@(SPEx == null || (SPEx.fetchingInstruction == null && SPEx.executingInstruction == null && SPEx.decodingInstruction == null && SPEx.memoryInstruction == null && SPEx.writingBackInstruction == null))"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-icons e-check" Text="Continue" OnClick="Continue" TooltipText="Continue through the rest of the program" Disabled="@(SPEx == null || (SPEx.fetchingInstruction == null && SPEx.executingInstruction == null && SPEx.decodingInstruction == null && SPEx.memoryInstruction == null && SPEx.writingBackInstruction == null))"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-icons e-bullet-3" Text="Stop" OnClick="Stop" TooltipText="Stop the program" Disabled="@(SPEx == null || (SPEx.fetchingInstruction == null && SPEx.executingInstruction == null && SPEx.decodingInstruction == null && SPEx.memoryInstruction == null && SPEx.writingBackInstruction == null))"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                    <ToolbarItem Text="DataPath" TooltipText="Show the data path of instructions" Disabled="@ShowButton" OnClick="OnClicked"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                    <ToolbarItem Text="Settings" TooltipText="Executor Settings" OnClick="e => IsModalOpened = true" Align="ItemAlign.Right" CssClass="e-sizing" Disabled="@(SPEx != null && (SPEx.fetchingInstruction != null || SPEx.executingInstruction != null || SPEx.decodingInstruction != null || SPEx.memoryInstruction != null || SPEx.writingBackInstruction != null))"></ToolbarItem>
                </ToolbarItems> 
            </SfToolbar>
            

            <SfDialog Target="#target" Width="1225px" Height="850px" ResizeHandles="@dialogResizeDirections" AllowDragging="true" EnableResize="true" ShowCloseIcon="true" @bind-Visible="StaticVisibility">
                <DialogTemplates>
                    <Header>Static Datapath: 
                        <Syncfusion.Blazor.Buttons.SfButton OnClick="step" Content="Step" Disabled="@(SPEx == null || (SPEx.fetchingInstruction == null && SPEx.executingInstruction == null && SPEx.decodingInstruction == null && SPEx.memoryInstruction == null && SPEx.writingBackInstruction == null))" IsPrimary="true" style="transform: translateY(5px)"></Syncfusion.Blazor.Buttons.SfButton>
                        <Syncfusion.Blazor.Buttons.SfButton OnClick="ClockTick" Content="Clock Tick" Disabled="@(SPEx == null || (SPEx.fetchingInstruction == null && SPEx.executingInstruction == null && SPEx.decodingInstruction == null && SPEx.memoryInstruction == null && SPEx.writingBackInstruction == null))" IsPrimary="true" style="transform: translateY(5px)"></Syncfusion.Blazor.Buttons.SfButton>
                    </Header>
                    <Content>
                        <SfDiagramComponent Height="680px" Constraints="DiagramConstraints.None" Nodes="@NodeCollection" Connectors="@ConnectorCollection" @ref="@diagram">
                            <SnapSettings Constraints=SnapConstraints.None>
                            </SnapSettings>
                        </SfDiagramComponent>
                        <textarea style="height: 35px; width: 265px; margin-left: 35px; text-align: center" readonly>@fetchMnemonic</textarea>
                        <textarea style="height: 35px; width: 257px; text-align: center" readonly>@decodeMnemonic</textarea>
                        <textarea style="height: 35px; width: 237px; text-align: center" readonly>@executeMnemonic</textarea>
                        <textarea style="height: 35px; width: 252px; text-align: center" readonly>@memoryMnemonic</textarea>
                        <textarea style="height: 35px; width: 118px; text-align: center" readonly>@writeMnemonic</textarea>
                    </Content>
                </DialogTemplates>
                <DialogEvents Opened="@DialogOpen" Closed="@DialogClose"></DialogEvents>
            </SfDialog>

            <SfDialog Target="#target" Width="1225px" Height="850px" ResizeHandles="@dialogResizeDirections" AllowDragging="true" EnableResize="true" ShowCloseIcon="true" @bind-Visible="DynamicVisibility">
                <DialogTemplates>
                    <Header>Dynamic Datapath: 
                        <Syncfusion.Blazor.Buttons.SfButton OnClick="step" Content="Step" Disabled="@(SPEx == null)" IsPrimary="true" style="transform: translateY(5px)"></Syncfusion.Blazor.Buttons.SfButton>
                        <Syncfusion.Blazor.Buttons.SfButton OnClick="ClockTick" Content="Clock Tick" Disabled="@(SPEx == null)" IsPrimary="true" style="transform: translateY(5px)"></Syncfusion.Blazor.Buttons.SfButton>
                    </Header>
                    <Content>
                        <SfDiagramComponent Height="720px" Constraints="DiagramConstraints.None" Nodes="@NodeCollection" Connectors="@ConnectorCollection" @ref="@diagram">
                            <SnapSettings Constraints=SnapConstraints.None>
                            </SnapSettings>
                        </SfDiagramComponent>
                    </Content>
                </DialogTemplates>
                <DialogEvents Opened="@DialogOpen" Closed="@DialogClose"></DialogEvents>
            </SfDialog>

            <SfDialog Target="#target" Width="350px" Height="140px" AllowDragging="false" EnableResize="false" ShowCloseIcon="true" @bind-Visible="errorVis">
                <DialogTemplates>
                    <Header>EMPTY SOURCE CODE ERROR</Header>
                    <Content>Your source code cannot build if there is no code there to build! Add some code first then try again.</Content>
                </DialogTemplates>
                <DialogEvents Closed="@errorClose"></DialogEvents>
            </SfDialog>
        </div>
        <div class="row">
            <div class="col-4" style="width: 30% !important">
                <div class="codeDiv">
                    <div class="tab">
                        <button class="tablinks" onclick="swapTab(event, 'Executor')" id="defaultOpen">Executor</button>
                        <button class="tablinks" onclick="swapTab(event, 'Debugger')" id="debuggerTab">Debugger</button>
                        <button class="tablinks" onclick="swapTab(event, 'Stats')">Statistics</button>
                    </div>

                    <div id="Executor" class="tabcontent">
                        <div class="executorTabContent">
                            <div>
                                <InputFile OnChange="@LoadFile" id="inputFile" class="float-start" accept=".txt"></InputFile>
                                <label id="exLabel"><b>Source Code</b></label>
                                <button @onclick="SaveAssemblyCode" type="button" class="float-end" id="saveButton">Save File</button>
                            </div>

                            <!--Monaco Editor currently in the works-->
                            <MonacoEditor @ref="_editor" Id="MonacoEditorID" ConstructionOptions="EditorConstructionOptions" CssClass="monacoEditorCSS" OnDidInit="EditorOnDidInit"/>

                            <!-- Remove this next line of code to use the original text editor-->
                            <!--<textarea @bind="ExecAssemblyCode" id="assemblyTextBox" class="assemblyCodeBoxToUpdate" placeholder="Write your assembly code here..."></textarea><br />-->
                            <div>
                                <label id="exLabel"><b>Machine Code</b></label>
                            </div>
                            <textarea @bind="ExecMachineCode" id="machineTextBox" readonly placeholder="Machine code output will appear here after building code..."></textarea>
                        </div>
                    </div>

                    <div id="Debugger" class="tabcontent">
                        <div class="debuggerTabContent">
                            <div class="debugLabel">
                                <label id="exLabel"><b>Stack Trace</b></label>
                            </div>
                            <div class="debugContainer" id="debugCodeId">
                                @if (SPEx != null)
                                {
                                    @foreach (var instr in SPEx.InstrList.InstructionOffsetDictionary)
                                    {
                                        <p class="@DivCSS(instr.Value)"><a class="@DivCSS(instr.Value)" title="Jump To @instr.Key.ToString("X4")" style="color: blue; text-decoration: underline; cursor: pointer" @onclick="() => selectMemDumpText(instr.Key)">@instr.Key.ToString("X4")</a>:     @instr.Value.Disassemble()</p>
                                    }
                                }
                                <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
                            </div>
                        </div>
                    </div>

                    <div id="Stats" class="tabcontent">
                        <div class="statsTabContent">
                            <div>
                                <label id="exLabel" class="statsClass"><b>Statistics</b></label>
                                <button @onclick="SaveStats" type="button" class="float-end" id="saveButton">Save Stats</button>
                            </div>
                            <textarea @bind="statsString" id="statsTabTextarea" placeholder="Statistics will appear after running the code..." readonly></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-5" style="width: 40% !important">
                <div>
                    <div class="registerPane" id="RegisterPane">
                        <div>
                            <div class="row">
                                <div class="col-sm-4" style="align-items: center">
                                    <label class="registerLabel"><b>PC:</b></label>
                                    <textarea readonly class="registerTextArea">@PC</textarea><br/>

                                    <label class="registerLabel"><b>SP:</b></label>
                                    <textarea readonly class="registerTextArea">@SP</textarea><br/>

                                    <label class="registerLabel"><b>FL:</b></label>
                                    <textarea readonly class="registerTextArea">@FL</textarea><br/>
                                        
                                    <label class="registerLabel"><b>MP:</b></label>
                                    <textarea readonly class="registerTextArea">@MBP</textarea><br/>
                                </div>

                                <div class="col-sm-4">
                                    <label class="registerLabel"><b>R0:</b></label>
                                    <textarea readonly class="registerTextArea">@r0</textarea><br/>

                                    <label class="registerLabel"><b>R1:</b></label>
                                    <textarea readonly class="registerTextArea">@r1</textarea><br/>

                                    <label class="registerLabel"><b>R2:</b></label>
                                    <textarea readonly class="registerTextArea">@r2</textarea><br/>

                                    <label class="registerLabel"><b>R3:</b></label>
                                    <textarea readonly class="registerTextArea">@r3</textarea><br/>

                                    <label class="registerLabel"><b>R4:</b></label>
                                    <textarea readonly class="registerTextArea">@r4</textarea><br/>

                                    <label class="registerLabel"><b>R5:</b></label>
                                    <textarea readonly class="registerTextArea">@r5</textarea><br/>

                                    <label class="registerLabel"><b>R6:</b></label>
                                    <textarea readonly class="registerTextArea">@r6</textarea><br/>

                                    <label class="registerLabel"><b>R7:</b></label>
                                    <textarea readonly class="registerTextArea">@r7</textarea>
                                </div>
                                    
                                <div class="col-sm-4">
                                    <label class="registerLabel"><b>F0:</b></label>
                                    <textarea readonly class="registerTextArea">@f0</textarea><br/>

                                    <label class="registerLabel"><b>F1:</b></label>
                                    <textarea readonly class="registerTextArea">@f1</textarea><br/>

                                    <label class="registerLabel"><b>F2:</b></label>
                                    <textarea readonly class="registerTextArea">@f2</textarea><br/>

                                    <label class="registerLabel"><b>F3:</b></label>
                                    <textarea readonly class="registerTextArea">@f3</textarea><br/>

                                    <label class="registerLabel"><b>F4:</b></label>
                                    <textarea readonly class="registerTextArea">@f4</textarea><br/>

                                    <label class="registerLabel"><b>F5:</b></label>
                                    <textarea readonly class="registerTextArea">@f5</textarea><br/>

                                    <label class="registerLabel"><b>F6:</b></label>
                                    <textarea readonly class="registerTextArea">@f6</textarea><br/>

                                    <label class="registerLabel"><b>F7:</b></label>
                                    <textarea readonly class="registerTextArea">@f7</textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ioPane">
                        <div class="ioContent">
                            <div class="inputBox">
                                <div>
                                    <label id="exLabel"><b>Input</b></label>
                                </div>
                                <textarea class="ExIOTextarea" placeholder="Input stuff here for the code to use..."></textarea><br/>
                            </div>
                            <div class="outputBox">
                                <div>
                                    <label id="exLabel"><b>Output</b></label>
                                </div>
                                <textarea class="ExIOTextarea" placeholder="Ouput will appear here after running code...">@output</textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-3" style="width: 30% !important">
                <div>
                    <div class="memDump">
                        <div class="memoryDumpContent">
                            <div class="MemLabelClass">
                                <button class="byteAddressLabel float-start"> Jump To </button>
                                <input id="MemDumpStart" class="byteAddressInput float-start" placeholder="ex. 00AB" @bind-value="@MemDumpStart">
                                <div class="memDumpLabel">
                                    <label id="exLabel"><b>Memory Dump</b></label>
                                </div>
                            </div>
                            <div class="memoryContainer" id="memDumpId">
                                @if (SPEx != null)
                                {
                                    @if (MemDumpStart == String.Empty || Convert.ToUInt32(MemDumpStart, 16) == 0)
                                    {
                                        @foreach (var instr in SPEx.InstrList.InstructionOffsetDictionary)
                                        {
                                            <span class="@DivCSS(instr.Value)">
                                                @foreach (var character in MemDumpContent.Substring((int) (instr.Key * 2), (int) (instr.Value.lengthInBytes * 2)))
                                                {
                                                    @character
                                                    IncrementCharCount();
                                                    if (charCount == instr.Value.lengthInBytes * 2)
                                                    {
                                                        ClearCharCount();
                                                    }
                                                    if (charCount % 2 == 0 && charCount != 0 && charCount != (int) (instr.Value.lengthInBytes * 2))
                                                    {
                                                        @space
                                                    }
                                                }
                                            </span>
                                            @space
                                        }
                                        @foreach (var character in MemDumpContent.Substring((int) (SPEx.InstrList.InstructionOffsetDictionary.Keys.Last() + SPEx.InstrList.InstructionOffsetDictionary.Values.Last().lengthInBytes * 2) * 2))
                                        {
                                            @character
                                            IncrementCharCount();
                                            if (charCount % 2 == 0)
                                            {
                                                @space
                                            }
                                            if (charCount == MemDumpContent.Length)
                                            {
                                                ClearCharCount();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        @foreach (var character in MemDumpContent)
                                        {
                                            @character
                                            IncrementCharCount();
                                            if (charCount % 2 == 0)
                                            {
                                                @space
                                            }
                                            if (charCount == MemDumpContent.Length)
                                            {
                                                ClearCharCount();
                                            }
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
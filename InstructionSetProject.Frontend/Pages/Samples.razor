@page "/samples"
@inject IJSRuntime JSRuntime

<style>
    div {
        font-size: 18px;
        text-align: center;
    }

    label {
        font-size: 26px;
    }

    textarea {
        height: 250px; 
        width: 350px;
        font-size: 22px;
    }

    img {
        height: 55px;
        width: 55px;
    }

    strong {
        color: rgb(60, 60, 60);
    }

    p {
        font-size: 20px;
    }

    h1 {
        font-style: oblique;
        font-size: 44px;
    }
</style>

<div class="code_input" style="width:100%">
    <br />
    <h1>Sample Code</h1>

    <hr />
    <br />

    <h2>Addition and Subtraction</h2>

    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-3">
            <label>Assembly Code</label><br />
            <textarea id="idAddSubAssem1" readonly>@addSubAssem1</textarea><br />
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idAddSubAssem1)">Copy Source</button>
        </div>
        <div class="col-sm-2"><img src="arrow-left-right.svg"/></div>
        <div class="col-sm-3">
            <label>Machine Code</label><br />
            <textarea id="idAddSubMach1" readonly>@addSubMach1</textarea>
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idAddSubMach1)">Copy Machine</button>
        </div>
        <div class="col-sm-2"></div>
    </div>

    <div>
        <div class="row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <label>What does this code do?</label>
                <p>
                    This code contains 3 lines and starting from the first line <strong>ADD r1, r2, r3</strong> it takes
                    the values in r2 and r3 and adds them together and stores that output in r1. The second line containing
                    <strong>SUB r1, r2, r3</strong> takes the values located in r2 and r3 and subtracts the two values and 
                    the output is stored back into r1. The final line <strong>HLT</strong> is used to end the execution
                    of the program.
                </p>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>

    <hr />
    <br />

    <h2>Load and Store</h2>

    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-3">
            <label>Assembly Code</label><br />
            <textarea id="idLoadStoreAssem1" readonly>@loadStoreAssem1</textarea>
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idLoadStoreAssem1)">Copy Source</button>
        </div>
        <div class="col-sm-2"><img src="arrow-left-right.svg"/></div>
        <div class="col-sm-3">
            <label>Machine Code</label><br />
            <textarea id="idLoadStoreMach1" readonly>@loadStoreMach1</textarea>
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idLoadStoreMach1)">Copy Machine</button>
        </div>
        <div class="col-sm-2"></div>
    </div>

    <div>
        <div class="row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <label>What does this code do?</label>
                <p>
                    This code contains 3 lines and starting from the first line <strong>LDW r1, r2, r</strong> it takes
                    the value located in r2 and goes to that point in memory and grabs what is there and stores it in r1. 
                    The second line containing <strong>STW r1, 1AB2, d</strong> takes the value located in r1 and stores it
                    at the memory location of the label, in this case <strong>1AB2</strong>. The final line <strong>HLT</strong> 
                    is used to end the execution of the program.
                </p>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>
    
    <hr />
    <br />

    <h2>Jump</h2>

    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-3">
            <label>Assembly Code</label><br />
            <textarea id="idJumpAssem1" readonly>@jumpAssem1</textarea><br />
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idJumpAssem1)">Copy Source</button>
        </div>
        <div class="col-sm-2"><img src="arrow-left-right.svg"/></div>
        <div class="col-sm-3">
            <label>Machine Code</label><br />
            <textarea id="idJumpMach1" readonly>@jumpMach1</textarea>
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idJumpMach1)">Copy Machine</button>
        </div>
        <div class="col-sm-2"></div>
    </div>

    <div>
        <div class="row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <label>What does this code do?</label>
                <p>
                    This code contains 4 lines and starting from the first line <strong>JMP 0006</strong> it <i>jumps</i> in execution
                    to the address of the label given, in this case <strong>0006</strong> which is the line of the STW instruction.
                    The second line containing <strong>XOR r1, r2, r3</strong> does get the chance to do anything in this example
                    because as previously stated it is <i>jumped</i> over by the JMP instruction. The third line <strong>STW r1, 001A, d</strong> 
                    is then executed storing r1 in memory location 001A. The final line <strong>HLT</strong> is used to end the execution
                    of the program.
                </p>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>

    <hr />
    <br />

    <h2>Push and Pop</h2>

    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-3">
            <label>Assembly Code</label><br />
            <textarea id="idPushPopAssem1" readonly>@pushPopAssem1</textarea><br />
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idPushPopAssem1)">Copy Source</button>
        </div>
        <div class="col-sm-2"><img src="arrow-left-right.svg"/></div>
        <div class="col-sm-3">
            <label>Machine Code</label><br />
            <textarea id="idPushPopMach1" readonly>@pushPopMach1</textarea>
            <button class="btn btn-primary btn-lg" @onclick="() => CopyTextToClipboard(idPushPopMach1)">Copy Machine</button>
        </div>
        <div class="col-sm-2"></div>
    </div>

    <div>
        <div class="row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <label>What does this code do?</label>
                <p>
                    This code contains 4 lines and starting from the first line <strong>PUSH r1</strong> which takes r1 and <i>pushes</i>
                    it onto the stack for use later or if r1 need to be used by another instruction right now. The second line containing 
                    <strong>POP r1</strong> <i>pops</i> r1 off the stack by moving the stack to the memory location of r1. The third line
                    <strong>STW r1, 01AA, d</strong> is then executed storing r1 in memory location 01AA. The final line <strong>HLT</strong>
                    is used to end the execution of the program.
                </p>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>

</div>


@code {
    private string addSubAssem1 = "ADD r1, r2, r3\nSUB r1, r2, r3\nHLT";
    private string addSubMach1 = "";
    private string idAddSubAssem1 = "idAddSubAssem1";
    private string idAddSubMach1 = "idAddSubMach1";
    private string loadStoreAssem1 = "LDW r1, r2, r\nSTW r1, 1AB2, d\nHLT";
    private string loadStoreMach1 = "";
    private string idLoadStoreAssem1 = "idLoadStoreAssem1";
    private string idLoadStoreMach1 = "idLoadStoreMach1";
    private string jumpAssem1 = "JMP 0006\nXOR r1, r2, r3\nSTW r1, 001A, d\nHLT";
    private string jumpMach1 = "";
    private string idJumpAssem1 = "idJumpAssem1";
    private string idJumpMach1 = "idJumpMach1";
    private string pushPopAssem1 = "PUSH r1\nPOP r1\nSTW r1, 01AA, d\nHLT";
    private string pushPopMach1 = "";
    private string idPushPopAssem1 = "idPushPopAssem1";
    private string idPushPopMach1 = "idPushPopMach1";


    private async Task CopyTextToClipboard(string id)
    {
        await JSRuntime.InvokeVoidAsync("copyClipboard", id);
    }
}

@page "/assembler"
@using InstructionSetProject.Backend;
@using InstructionSetProject.Backend.StaticFrontend;
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime

<style>
    .dark-mode-assembler-code-input {
        background-color: #002833;
        padding: 0px 20px 20px 20px;
        margin-top: 10px;
        border: solid 2px #003033;
        color: #DEB992;
        font-family: 'Courier New', sans-serif;
    }

    .dark-mode-assembler-textarea {
        background-color: black;
        color: #adadad;
    }

    .dark-mode-assembler-btn {
        background-color: #051622;
        color: #adadad;
        border: 2px solid #003033;
    }

    .dark-mode-assembler-btn:hover {
        background-color: #004a52;
        color: #adadad;
        border: 2px solid #003033;
    }

    ::-webkit-scrollbar {
        display: none;
    }

    .monacoEditorCSS {
        margin-bottom: 8px;
        width: 100%;
        height: 595px;
        border: 2px solid gray;
    }
</style>

<div class="code_input_assembler">
    <div class="code_input_wrapper">
        <div class="row">
            <div class="col-sm-5">
                <div class="row">
                    <div class="col-sm-6 assemLabel">
                        <label for="assemble">Assembler</label>
                        <h6>(Assembly Code)</h6>
                    </div>
                    <div class="col-sm-6 fileLoad">
                        <InputFile OnChange="@LoadFile" accept=".txt"></InputFile>
                    </div>

                </div> 
            </div>
    
            <div class="col-sm-2"></div>


            <div class="col-sm-5">
                <label for="outputAss">Output</label>
                <h6>(Machine Code)</h6>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-5">
                <MonacoEditor @ref="_editorAss" Id="MonacoEditorID" ConstructionOptions="EditorConstructionOptions" CssClass="monacoEditorCSS" OnDidInit="EditorOnDidInit"/>
                <!--<textarea @bind="currentCodeAss" id="assemble" name="assemble" placeholder="@assemblyPlaceholder"></textarea>-->
                <p>
                    <button @onclick="SaveAssemblyCode" type="button" name="ass_btn" class="btn btn-primary btn-lg assBtn">Save Code</button>
                    <button @onclick="OpenAssemblyCodeExecutor" type="button" name="ass_btn" class="btn btn-primary btn-lg float-end assBtn">Open Executor</button>
                </p>
            </div>
    
            <div class="col-sm-2">
                <div>
                    <button @onclick="Assemble" type="button" name="ass_btn" class="btn btn-primary btn-lg assBtn">
                        &raquo;
                    </button>
                </div>
            </div>
    
            <div class="col-sm-5">
                <textarea @bind="currentCodeOutAss" id="outputAss" name="outputAss" readonly></textarea>
                <p>
                    <button @onclick="SaveOutput" type="button" name="ass_btn" class="btn btn-primary btn-lg assBtn">Save Output</button>
                </p>
            </div>
        </div>
    </div>
</div>

@code {

    private string currentCodeAss { get; set; }
    private string currentCodeOutAss { get; set; }

    private string assemblyPlaceholder = "ADD r1, r2, r3\nSUB r1, r3, r5\n...";

    private List<byte> machineCode = new List<byte>();

    private string fileContent = "";

    bool darkModeAssemblerPage = FrontendVariables.darkMode;

    private MonacoEditor? _editorAss { get; set; }

    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (darkModeAssemblerPage == true)
        {
            await JSRuntime.InvokeVoidAsync("toggleDarkModeJS", darkModeAssemblerPage);
            FrontendVariables.darkModeAssembler = darkModeAssemblerPage;
            FrontendVariables.darkModeAssemblerChanged = true;
        }
        if (firstRender)
        {
            await _editorAss.SetValue("");
        }
    }

    private async Task Assemble()
    {
        machineCode = Assembler.Assemble(await _editorAss.GetValue());
        string hexCode = BitConverter.ToString(machineCode.ToArray());
        currentCodeOutAss = hexCode.Replace("-", " ");
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        long maxsize = 512000;

        var buffer = new byte[file.Size];
        await file.OpenReadStream(maxsize).ReadAsync(buffer);
        fileContent = System.Text.Encoding.UTF8.GetString(buffer);
        currentCodeAss = fileContent;
    }

    private async Task SaveAssemblyCode()
    {
        byte[] file = System.Text.Encoding.UTF8.GetBytes(currentCodeAss);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "assemblyCode.txt", "text/plain", file);
    }

    private async Task SaveOutput()
    {
        byte[] file = System.Text.Encoding.UTF8.GetBytes(currentCodeOutAss);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "machineCode.txt", "text/plain", file);
    }

    private void OpenAssemblyCodeExecutor()
    {
        FrontendVariables.currentAssemblyCodeExecutor = currentCodeAss;
        UriHelper.NavigateTo("executor");
    }

    protected override async Task OnInitializedAsync()
    {
        StartupMethod();
    }

    void StartupMethod()
    {
        currentCodeAss = FrontendVariables.currentCodeAssembler;
        FrontendVariables.currentCodeAssembler = "";
    }

    // Monaco Editor

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "ISInstructionSet",
            Value = ""
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        await MonacoEditorBase.DefineTheme("ISTheme", new StandaloneThemeData
        {
            Base = FrontendVariables.darkMode ? "vs-dark" : "vs",
            Inherit = false,
            Rules = new List<TokenThemeRule>
            {
                new TokenThemeRule { Background = (FrontendVariables.darkMode ? "000000" : "FFFFFF"), Foreground = (FrontendVariables.darkMode ? "E0E0E0" : "000000")},
                new TokenThemeRule { Token = "mnemonic", Foreground = (FrontendVariables.darkMode ? "4353FA" : "0524a3") },
                new TokenThemeRule { Token = "register", Foreground = (FrontendVariables.darkMode ? "999900" : "777700") },
                new TokenThemeRule { Token = "comment", Foreground = (FrontendVariables.darkMode ? "119922" : "11AA22"), FontStyle = "italic" },
                new TokenThemeRule { Token = "addressModes", Foreground = (FrontendVariables.darkMode ? "FF7DA4" : "94072d") },
                new TokenThemeRule { Token = "branchLabel", Foreground = (FrontendVariables.darkMode ? "7E5EFF" : "4b0774") },
            },
            Colors = new Dictionary<string, string>
            {
                ["editor.background"] = (FrontendVariables.darkMode ? "#000000" : "#FFFFFF"),
                ["editorCursor.foreground"] = (FrontendVariables.darkMode ? "#E0E0E0" : "#000000"),
                ["editorLineNumber.foreground"] = "#7A7A7A"
            }
        });

        await MonacoEditorBase.SetTheme("ISTheme");

        if (currentCodeAss != "")
        {
            await _editorAss.SetValue(currentCodeAss);
        }

        await JSRuntime.InvokeVoidAsync("setupMonacoLanguage");
    }

}

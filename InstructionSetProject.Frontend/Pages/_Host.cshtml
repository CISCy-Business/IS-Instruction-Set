@page "/"
@namespace InstructionSetProject.Frontend.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_Layout";
}

<head>
    <environment include="Development">
        <link href="_content/Syncfusion.Blazor.Themes/bootstrap4.css" rel="stylesheet"/>
    </environment>
</head>

<script>
    function BlazorDownloadFile(filename, contentType, content) {
        // Create the URL
        const file = new File([content], filename, { type: contentType });
        const exportUrl = URL.createObjectURL(file);

        // Create the <a> element and click on it
        const a = document.createElement("a");
        document.body.appendChild(a);
        a.href = exportUrl;
        a.download = filename;
        a.target = "_self";
        a.click();

        // We don't need to keep the object url, let's release the memory
        // On Safari it seems you need to comment this line... (please let me know if you know why)
        URL.revokeObjectURL(exportUrl);
    }

    //Not in use now but I am leaving it here for later use if we choose to
    function copyClipboard(id) {
        var copyText = document.getElementById(id);
        copyText.select();
        document.execCommand("copy");
    }

    function swapTab(evnt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evnt.currentTarget.className += " active";
    }

    function autoSelectFirstTab() {
        document.getElementById("defaultOpen").click();
    }

    function selectDebugTab() {
        document.getElementById("debuggerTab").click();
    }

    function stepScroll() {
      var elem = document.getElementById('debugCodeId');
      elem.scrollTop += 10;
    }

    function debugScrollToTop() {
      var elem = document.getElementById('debugCodeId');
      elem.scrollTop = 0;
    }

    function handleKeyPress(e){
        var key=e.keyCode || e.which;
        if (key==13){
             var elem = document.getElementById('syntaxDiv');
             SyntaxHighlight(elem);
        }
    }


    function getDiagramFileName(dialogName) 
    {
        if (dialogName === 'export')
            return document.getElementById('diagramName').innerHTML.toString();
        if (dialogName === 'save')
            return document.getElementById('diagramName').value.toString();
        else
            return document.getElementById('diagramName').innerHTML.toString();
    }

    function saveDiagram(data, filename) 
    {
        if (window.navigator.msSaveBlob) {
            let blob = new Blob([data], { type: 'data:text/json;charset=utf-8,' });
            window.navigator.msSaveOrOpenBlob(blob, filename + '.json');
        } else {
            let dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(data);
            let a = document.createElement('a');
            a.href = dataStr;
            a.download = filename + '.json';
            document.body.appendChild(a);
            a.click();
            a.remove();
        }
    }

    function click() 
    {
        document.getElementById('UploadFiles').click();
    }

    function setupMonacoLanguage() {
        
        monaco.languages.register({ id: 'ISInstructionSet' });

        monaco.languages.setMonarchTokensProvider( 'ISInstructionSet', {
            tokenizer: {
		        root: [
			        [/^\s*[A-Z]{3}/g, 'mnemonic'],
                    [/(r|f)[0-7]/g, 'register'],
                    [/#.*/g, 'comment'],
                    [/ id| rd| in| rn| xd| xn| xo| xf| sd| sn| so| sf| sxd| sxn| sxo| sxf$/g, 'addressModes'],
                    [/.*:/g, 'branchLabel'],
		        ]
	        }
        });

        monaco.languages.registerCompletionItemProvider( 'ISInstructionSet', {
            provideCompletionItems: function (model, position) {
                var word = model.getWordUntilPosition(position);
                var range = {
                    startLineNumber: position.lineNumber,
                    endLineNumber: position.lineNumber,
                    startColumn: word.startColumn,
                    endColumn: word.endColumn
                }

                return {
                    suggestions: [
                        // Pure Register Instructions
                        {
                            label: '"ADD"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'add' instruction:\n\tSyntax -> ADD destinationReg, sourceReg1, sourceReg2\n\nExample:\n\tr1 = 10;\n\tr2 = 15;\n\tr3 = 0;\n\n\tADD r3, r1, r2;\n\n\tr3 = 25 now",
                            insertText: "ADD ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"SUB"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'subtract' instruction:\n\tSyntax -> SUB destinationReg, sourceReg1, sourceReg2\n\nExample:\n\tr1 = 10;\n\tr2 = 15;\n\tr3 = 0;\n\n\tSUB r3, r2, r1;\n\n\tr3 = 5 now",
                            insertText: "SUB ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"ADC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'add with carry' instruction:\n\tSyntax -> ADC destinationReg, sourceReg1, sourceReg2\n\n",
                            insertText: "ADC ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"SBB"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'subtract with borrow' instruction:\n\tSyntax -> SBB destinationReg, sourceReg1, sourceReg2\n\n",
                            insertText: "SBB ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"NEG"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'negate' instruction:\n\tSyntax -> NEG destinationReg, sourceReg\n\n",
                            insertText: "NEG ${1:r1}, ${2:r2}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"NOT"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'bitwise not' instruction:\n\tSyntax -> NOT destinationReg, sourceReg\n\n",
                            insertText: "NOT ${1:r1}, ${2:r2}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"AND"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'bitwise and' instruction:\n\tSyntax -> AND destinationReg, sourceReg1, sourceReg2\n\n",
                            insertText: "AND ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"ORR"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'bitwise or' instruction:\n\tSyntax -> ORR destinationReg, sourceReg1, sourceReg2\n\n",
                            insertText: "ORR ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"XOR"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'bitwise exclusive or' instruction:\n\tSyntax -> XOR destinationReg, sourceReg1, sourceReg2\n\n",
                            insertText: "XOR ${1:r1}, ${2:r2}, ${3:r3}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"ABS"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'absolute value' instruction:\n\tSyntax -> XOR destinationReg(r/f), sourceReg(r/f)\n\n",
                            insertText: "ABS ${1:f1}, ${2:f2}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        // Small Immediate Mathematics
                        {
                            label: '"DEC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'decrement' instruction:\n\tSyntax -> DEC destinationReg, sourceReg, decrementValue\n\n",
                            insertText: "DEC ${1:r1}, ${2:r2}, ${3:DecrementValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"INC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'increment' instruction:\n\tSyntax -> INC destinationReg, sourceReg\n\n",
                            insertText: "INC ${1:r1}, ${2:r2}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        // Large Immediate Mathematics
                        {
                            label: '"ADI"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'add immediate' instruction:\n\tSyntax -> ADI destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "ADI ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"SBI"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'subtract immediate' instruction:\n\tSyntax -> SBI destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "SBI ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"AIC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'add immediate with carry' instruction:\n\tSyntax -> AIC destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "AIC ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"SIB"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'subtract immediate with borrow' instruction:\n\tSyntax -> SIB destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "SIB ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"ANI"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'and immediate' instruction:\n\tSyntax -> ANI destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "ANI ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"ORI"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'or immediate' instruction:\n\tSyntax -> ORI destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "ORI ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"XRI"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'exclusive or immediate' instruction:\n\tSyntax -> XRI destinationReg(r/f), sourceReg(r/f), immediateValue\n\n",
                            insertText: "XRI ${1:r1}, ${2:r2}, ${3:ImmediateValue}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        // Decision Making
                        {
                            label: '"CMP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'compare' instruction:\n\tSyntax -> CMP sourceReg1(r/f), sourceReg2(r/f)\n\n",
                            insertText: "CMP ${1:r1}, ${2:r2}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"TST"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'test' instruction:\n\tSyntax -> TST sourceReg1(r/f), sourceReg2(r/f)\n\n",
                            insertText: "TST ${1:r1}, ${2:r2}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STS"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'set sign flag' instruction:\n\tSyntax -> STS\n\n",
                            insertText: "STS",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"CLS"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'clear sign flag' instruction:\n\tSyntax -> CLS\n\n",
                            insertText: "CLS",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'set parity flag' instruction:\n\tSyntax -> STP\n\n",
                            insertText: "STP",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"CLP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'clear parity flag' instruction:\n\tSyntax -> CLP\n\n",
                            insertText: "CLP",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STO"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'set overflow flag' instruction:\n\tSyntax -> STO\n\n",
                            insertText: "STO",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"CLO"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'clear overflow flag' instruction:\n\tSyntax -> CLO\n\n",
                            insertText: "CLO",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'set carry flag' instruction:\n\tSyntax -> STC\n\n",
                            insertText: "STC",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"CLC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'clear carry flag' instruction:\n\tSyntax -> CLC\n\n",
                            insertText: "CLC",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STZ"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'set zero flag' instruction:\n\tSyntax -> STZ\n\n",
                            insertText: "STZ",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"CLZ"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'clear zero flag' instruction:\n\tSyntax -> CLZ\n\n",
                            insertText: "CLZ",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JMP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump unconditional' instruction:\n\tSyntax -> JMP labelToJumpTo\n\n",
                            insertText: "JMP ${1:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JEQ"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if equal' instruction:\n\tSyntax -> JEQ sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JEQ ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JNE"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if not equal' instruction:\n\tSyntax -> JNE sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JNE ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JYS"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if (yes) sign flag' instruction:\n\tSyntax -> JYS sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JYS ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JNS"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if not (no) sign flag' instruction:\n\tSyntax -> JNS sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JNS ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JYP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if (yes) parity flag' instruction:\n\tSyntax -> JYP sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JYP ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JNP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if not (no) parity flag' instruction:\n\tSyntax -> JNP sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JNP ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JYO"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if (yes) overflow flag' instruction:\n\tSyntax -> JYO sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JYO ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JNO"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if not (no) overflow flag' instruction:\n\tSyntax -> JNO sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JNO ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JYC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if (yes) carry flag' instruction:\n\tSyntax -> JYC sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JYC ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JNC"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if not (no) carry flag' instruction:\n\tSyntax -> JNC sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JNC ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JYZ"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if (yes) zero flag' instruction:\n\tSyntax -> JYZ sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JYZ ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"JNZ"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'jump if not (no) zero flag' instruction:\n\tSyntax -> JNZ sourceReg1(r/f), sourceReg2(r/f), labelToJumpTo\n\n",
                            insertText: "JNZ ${1:r1}, ${2:r2}, ${3:label}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        // Process Control Instructions
                        {
                            label: '"HLT"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'halt program' instruction:\n\tSyntax -> HLT\n\n",
                            insertText: "HLT",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"NOP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'no operation' instruction:\n\tSyntax -> NOP\n\n",
                            insertText: "NOP",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        // Memory Management Instructions
                        {
                            label: '"LDW"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'load word' instruction:\n\tSyntax -> LDW destinationReg, immediateValue, addressingMode\n\n",
                            insertText: "LDW ${1:r1}, ${2:15}, ${3:id}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STW"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'store word' instruction:\n\tSyntax -> LDW storingReg, memoryPointToStoreAt, addressingMode\n\n",
                            insertText: "STW ${1:r1}, ${2:0000}, ${3:id}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"SMP"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'set memory base pointer' instruction:\n\tSyntax -> SMP memoryBaseLocation\n\n",
                            insertText: "SMP ${1:memoryBaseAddress}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"LDF"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'load float' instruction:\n\tSyntax -> LDF destinationReg, immediateValue, addressingMode\n\n",
                            insertText: "LDF ${1:r1}, ${2:15}, ${3:id}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"STF"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'store float' instruction:\n\tSyntax -> STF storingReg, memoryPointToStoreAt, addressingMode\n\n",
                            insertText: "STF ${1:r1}, ${2:0000}, ${3:id}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"PSW"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'push word onto stack' instruction:\n\tSyntax -> PSW sourceRegToPush\n\n",
                            insertText: "PSW ${1:r1}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"PPW"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'pop word off stack' instruction:\n\tSyntax -> PPW destinationReg\n\n",
                            insertText: "PPW ${1:r1}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"PPF"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'pop float off stack' instruction:\n\tSyntax -> PPF destinationReg\n\n",
                            insertText: "PPF ${1:f1}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                        {
                            label: '"PSF"',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "This is the 'push float onto stack' instruction:\n\tSyntax -> PSF sourceRegToPush\n\n",
                            insertText: "PSF ${1:f1}",
                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                            range: range
                        },
                    ]
                }
            }
        });
    }










    function toggleDarkModeJS (index, disassembler, assembler, executor)
    {
        var element = document.body;
        if (index == true)
        {
            element.classList.add("dark-mode");
        }
        else
        {
            if (element.classList.contains("dark-mode"))
            {
                element.classList.remove("dark-mode");
            }
            else
            {
                element.classList.add("dark-mode");
            }
        }

        var element1 = document.getElementsByClassName("container");
        if (element1 != null && index != false)
        {
            for (i = 0; i < element1.length; i++) {
                element1[i].classList.add("dark-mode-container");
            }
        }
        else
        {
            if (element1 != null && index == false)
            {
                for (i = 0; i < element1.length; i++) {
                    element1[i].classList.remove("dark-mode-container");
                }
            }      
        }

        var element2 = document.getElementsByClassName("indexHeader1");
        if (element2 != null && index != false)
        {
            for (i = 0; i < element2.length; i++) {
                element2[i].classList.add("dark-mode-index-header");
            }
        }
        else
        {
            if (element2 != null && index == false)
            {
                for (i = 0; i < element2.length; i++) {
                    element2[i].classList.remove("dark-mode-index-header");
                }
            }      
        }

        var element3 = document.getElementsByClassName("indexPElem");
        if (element3 != null && index != false)
        {
            for (i = 0; i < element3.length; i++) {
                element3[i].classList.add("dark-mode-index-p-elem");
            }
        }
        else
        {
            if (element3 != null && index == false)
            {
                for (i = 0; i < element3.length; i++) {
                    element3[i].classList.remove("dark-mode-index-p-elem");
                }
            }      
        }

        var element4 = document.getElementsByClassName("indexHeader3");
        if (element4 != null && index != false)
        {
            for (i = 0; i < element4.length; i++) {
                element4[i].classList.add("dark-mode-index-header-3");
            }
        }
        else
        {
            if (element4 != null && index == false)
            {
                for (i = 0; i < element4.length; i++) {
                    element4[i].classList.remove("dark-mode-index-header-3");
                }
            }      
        }

        var element5 = document.getElementsByClassName("indexPList");
        if (element5 != null && index != false)
        {
            for (i = 0; i < element5.length; i++) {
                element5[i].classList.add("dark-mode-index-p-list");
            }
        }
        else
        {
            if (element5 != null && index == false)
            {
                for (i = 0; i < element5.length; i++) {
                    element5[i].classList.remove("dark-mode-index-p-list");
                }
            }      
        }


        var element6 = document.getElementsByClassName("code_input_disassembler");
        if (element6 != null && disassembler != false)
        {
            for (i = 0; i < element6.length; i++) {
                element6[i].classList.add("dark-mode-disassembler-code-input");
            }
        }
        else
        {
            if (element6 != null && disassembler == false)
            {
                for (i = 0; i < element6.length; i++) {
                    element6[i].classList.remove("dark-mode-disassembler-code-input");
                }
            }      
        }
        
        var element7 = document.getElementById("disassemble");
        if (element7 != null && disassembler != false)
        {
            element7.classList.add("dark-mode-disassembler-textarea");
        }
        else
        {
            if (element7 != null && disassembler == false)
            {
                element7.classList.remove("dark-mode-disassembler-textarea");
            }      
        }
        element7 = document.getElementById("outputDis");
        if (element7 != null && disassembler != false)
        {
            element7.classList.add("dark-mode-disassembler-textarea");
        }
        else
        {
            if (element7 != null && disassembler == false)
            {
                element7.classList.remove("dark-mode-disassembler-textarea");
            }      
        }

        var element8 = document.getElementsByClassName("disBtn");
        if (element8 != null && disassembler != false)
        {
            for (i = 0; i < element8.length; i++) {
                element8[i].classList.add("dark-mode-disassembler-btn");
            }
        }
        else
        {
            if (element8 != null && disassembler == false)
            {
                for (i = 0; i < element8.length; i++) {
                    element8[i].classList.remove("dark-mode-disassembler-btn");
                }
            }      
        }

        var element9 = document.getElementsByClassName("code_input_assembler");
        if (element9 != null && assembler != false)
        {
            for (i = 0; i < element9.length; i++) {
                element9[i].classList.add("dark-mode-assembler-code-input");
            }
        }
        else
        {
            if (element9 != null && assembler == false)
            {
                for (i = 0; i < element9.length; i++) {
                    element9[i].classList.remove("dark-mode-assembler-code-input");
                }
            }      
        }
        
        var element10 = document.getElementById("assemble");
        if (element10 != null && assembler != false)
        {
            element10.classList.add("dark-mode-assembler-textarea");
        }
        else
        {
            if (element10 != null && assembler == false)
            {
                element10.classList.remove("dark-mode-assembler-textarea");
            }      
        }
        element10 = document.getElementById("outputAss");
        if (element10 != null && assembler != false)
        {
            element10.classList.add("dark-mode-assembler-textarea");
        }
        else
        {
            if (element10 != null && assembler == false)
            {
                element10.classList.remove("dark-mode-assembler-textarea");
            }      
        }

        var element11 = document.getElementsByClassName("assBtn");
        if (element11 != null && assembler != false)
        {
            for (i = 0; i < element11.length; i++) {
                element11[i].classList.add("dark-mode-assembler-btn");
            }
        }
        else
        {
            if (element11 != null && assembler == false)
            {
                for (i = 0; i < element11.length; i++) {
                    element11[i].classList.remove("dark-mode-assembler-btn");
                }
            }      
        }

        var element12 = document.getElementsByClassName("code_input_executor");
        if (element12 != null && executor != false)
        {
            for (i = 0; i < element12.length; i++) {
                element12[i].classList.add("dark-mode-executor-code-input");
            }
        }
        else
        {
            if (element12 != null && executor == false)
            {
                for (i = 0; i < element12.length; i++) {
                    element12[i].classList.remove("dark-mode-executor-code-input");
                }
            }      
        }
        element12 = document.getElementsByClassName("tab");
        if (element12 != null && executor != false)
        {
            for (i = 0; i < element12.length; i++) {
                element12[i].classList.add("dark-mode-executor-code-input");
            }
        }
        else
        {
            if (element12 != null && executor == false)
            {
                for (i = 0; i < element12.length; i++) {
                    element12[i].classList.remove("dark-mode-executor-code-input");
                }
            }      
        }

        var element13 = document.getElementById("assemblyTextBox");
        if (element13 != null && executor != false)
        {
            element13.classList.add("dark-mode-executor-textarea");
        }
        else
        {
            if (element13 != null && executor == false)
            {
                element13.classList.remove("dark-mode-executor-textarea");
            }      
        }
        element13 = document.getElementById("statsTabTextarea");
        if (element13 != null && executor != false)
        {
            element13.classList.add("dark-mode-executor-textarea");
        }
        else
        {
            if (element13 != null && executor == false)
            {
                element13.classList.remove("dark-mode-executor-textarea");
            }      
        }
        element13 = document.getElementById("debugCodeId");
        if (element13 != null && executor != false)
        {
            element13.classList.add("dark-mode-executor-textarea");
        }
        else
        {
            if (element13 != null && executor == false)
            {
                element13.classList.remove("dark-mode-executor-textarea");
            }      
        }
        element13 = document.getElementById("machineTextBox");
        if (element13 != null && executor != false)
        {
            element13.classList.add("dark-mode-executor-textarea");
        }
        else
        {
            if (element13 != null && executor == false)
            {
                element13.classList.remove("dark-mode-executor-textarea");
            }      
        }
        element13 = document.getElementsByClassName("registerTextArea");
        if (element13 != null && executor != false)
        {
            for (i = 0; i < element13.length; i++) {
                element13[i].classList.add("dark-mode-executor-register-pane");
            }
        }
        else
        {
            if (element13 != null && executor == false)
            {
                for (i = 0; i < element13.length; i++) {
                    element13[i].classList.remove("dark-mode-executor-register-pane");
                }
            }      
        }
        element13 = document.getElementsByClassName("registerLabel");
        if (element13 != null && executor != false)
        {
            for (i = 0; i < element13.length; i++) {
                element13[i].classList.add("dark-mode-executor-register-label");
            }
        }
        else
        {
            if (element13 != null && executor == false)
            {
                for (i = 0; i < element13.length; i++) {
                    element13[i].classList.remove("dark-mode-executor-register-label");
                }
            }      
        }
        element13 = document.getElementsByClassName("ExIOTextarea");
        if (element13 != null && executor != false)
        {
            for (i = 0; i < element13.length; i++) {
                element13[i].classList.add("dark-mode-executor-textarea");
            }
        }
        else
        {
            if (element13 != null && executor == false)
            {
                for (i = 0; i < element13.length; i++) {
                    element13[i].classList.remove("dark-mode-executor-textarea");
                }
            }      
        }
        element13 = document.getElementById("memDumpId");
        if (element13 != null && executor != false)
        {
            element13.classList.add("dark-mode-executor-textarea");
        }
        else
        {
            if (element13 != null && executor == false)
            {
                element13.classList.remove("dark-mode-executor-textarea");
            }      
        }

        var element14 = document.getElementsByClassName("helpTable");
        if (element14 != null && executor != false)
        {
            for (i = 0; i < element14.length; i++) {
                element14[i].classList.add("dark-mode-help-table");
            }
        }
        else
        {
            if (element14 != null && executor == false)
            {
                for (i = 0; i < element14.length; i++) {
                    element14[i].classList.remove("dark-mode-help-table");
                }
            }      
        }

        var element15 = document.getElementsByClassName("helpLabel");
        if (element15 != null && executor != false)
        {
            for (i = 0; i < element15.length; i++) {
                element15[i].classList.add("dark-mode-help-label");
            }
        }
        else
        {
            if (element15 != null && executor == false)
            {
                for (i = 0; i < element15.length; i++) {
                    element15[i].classList.remove("dark-mode-help-label");
                }
            }      
        }

        var element16 = document.getElementsByClassName("helpP");
        if (element16 != null && executor != false)
        {
            for (i = 0; i < element16.length; i++) {
                element16[i].classList.add("dark-mode-help-p");
            }
        }
        else
        {
            if (element16 != null && executor == false)
            {
                for (i = 0; i < element16.length; i++) {
                    element16[i].classList.remove("dark-mode-help-p");
                }
            }      
        }

        var element17 = document.getElementsByClassName("sampleTextarea");
        if (element17 != null && executor != false)
        {
            for (i = 0; i < element17.length; i++) {
                element17[i].classList.add("dark-mode-sample-textarea");
            }
        }
        else
        {
            if (element17 != null && executor == false)
            {
                for (i = 0; i < element17.length; i++) {
                    element17[i].classList.remove("dark-mode-sample-textarea");
                }
            }      
        }

        var element18 = document.getElementsByClassName("sampleBtn");
        if (element18 != null && executor != false)
        {
            for (i = 0; i < element18.length; i++) {
                element18[i].classList.add("dark-mode-sample-btn");
            }
        }
        else
        {
            if (element18 != null && executor == false)
            {
                for (i = 0; i < element18.length; i++) {
                    element18[i].classList.remove("dark-mode-sample-btn");
                }
            }      
        }

        var element19 = document.getElementsByClassName("sampleLabel");
        if (element19 != null && executor != false)
        {
            for (i = 0; i < element19.length; i++) {
                element19[i].classList.add("dark-mode-sample-label");
            }
        }
        else
        {
            if (element19 != null && executor == false)
            {
                for (i = 0; i < element19.length; i++) {
                    element19[i].classList.remove("dark-mode-sample-label");
                }
            }      
        }

        var element20 = document.getElementsByClassName("sampleP");
        if (element20 != null && executor != false)
        {
            for (i = 0; i < element20.length; i++) {
                element20[i].classList.add("dark-mode-sample-p");
            }
        }
        else
        {
            if (element20 != null && executor == false)
            {
                for (i = 0; i < element20.length; i++) {
                    element20[i].classList.remove("dark-mode-sample-p");
                }
            }      
        }

        var element21 = document.getElementsByClassName("modalForm");
        if (element21 != null && executor != false)
        {
            for (i = 0; i < element21.length; i++) {
                element21[i].classList.add("dark-mode-modal");
            }
        }
        else
        {
            if (element21 != null && executor == false)
            {
                for (i = 0; i < element21.length; i++) {
                    element21[i].classList.remove("dark-mode-modal");
                }
            }      
        }

    }

    function blazorInitializeModal(dialog, reference) {
        dialog.addEventListener("close", async e => {
            await reference.invokeMethodAsync("OnClose", dialog.returnValue);
        });
    }

    function blazorOpenModal(dialog) {
        if (!dialog.open) {
            dialog.showModal();
        }
    }

    function blazorCloseModal(dialog) {
        if (dialog.open) {
            dialog.close();
        }
    }
    
</script>


<component type="typeof(App)" render-mode="ServerPrerendered" />

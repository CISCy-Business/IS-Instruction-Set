@page "/help"
@inject IJSRuntime JSRuntime;
@using InstructionSetProject.Backend.StaticFrontend;
@using System.Text.Json;

<style>
    table, th, td {
      border: 1px solid black;
      align-content: center;
    }

    table {
        color: black;
        background: white;
        margin-left: auto;
        margin-right: auto;
        border: 2px solid black;
    }

    div {
        font-size: 18px;
        text-align: center;
    }

    label {
        font-size: 34px;
    }

    .dark-mode-help-table {
        background-color: grey;
        color: black;
    }

    .dark-mode-help-label {
        color: #DEB992;
        font-family: Courier New, sans-serif;
    }

    .dark-mode-help-p {
        color: #1BA098;
        font-family: Courier New, sans-serif;
    }

    ::-webkit-scrollbar {
        display: none;
    }

    th {
        background: darkgray;
        border: 2px solid black;
        font-size: 20px;
        @(FrontendVariables.darkMode ? "background-color: #32353b" : "background-color: #989ba3");
    }

    td {
        border: 1px solid black;
        @(FrontendVariables.darkMode ? "background-color: #737378" : "background-color: #e1e4eb");
    }

    tr {
        border: 1px solid black;
        @(FrontendVariables.darkMode ? "background-color: #737378" : "background-color: #e1e4eb");
    }
</style>


<div class="code_input" style="width:100%">
    <br /><h1 class="helpLabel" style="font-size: 38px">IS Instruction Set Architecture</h1><br /><hr /><br />

    <p class="helpP" style="font-size: 18px">
        Here you can find our entire instruction set up to this point as well as examples for each.
    </p>

    <div>
        <label class="helpLabel">Addressing Modes</label>
        <table class="helpTable" style="width:60%">
            <tr>
                <th>Name</th>
                <th>Letters</th>
                <th>Binary</th>
                <th>Treatment</th>
                <th>Notes</th>
            </tr>
            @for (int i = 0; i < addressMode?.Length; i++)
            {
                <tr>
                    <td>@addressMode[i].Name</td>
                    <td>@addressMode[i].Letters</td>
                    <td>@addressMode[i].Binary</td>
                    <td>@addressMode[i].Treatment</td>
                    <td>@addressMode[i].Notes</td>
                </tr>
            }
        </table>
        
    </div>

    <div>
        <label class="helpLabel">Registers</label>
        <table class="helpTable" style="width:60%">
            <tr>
                <th colspan=2>Accessible</th>
            </tr>
          <tr>
            <th>Reg</th>
            <th>Use Case</th>
          </tr>
          @for (int i = 0; i < 17; i++)
            {
                if(registerTable[i].Reg == null)
                {
                    <tr style="height: 25px"></tr>
                }
                else
                {
                    <tr>
                        <td>@registerTable[i].Reg</td>
                        <td>@registerTable[i].UseCase</td>
                    </tr>
                }
            }
          <tr>
            <th colspan=2>Inaccessible</th>
          </tr>
          <tr>
            <th>Reg</th>
            <th>Use Case</th>
          </tr>
          @for (int i = 19; i <= 22; i++)
            {
                <tr>
                    <td>@registerTable[i].Reg</td>
                    <td>@registerTable[i].UseCase</td>
                </tr>
            }
        </table>
    </div>

    <div>
        <label class="helpLabel">Types of Instructions</label>
        <table class="helpTable" style="width:60%">
          <tr>
            <th>Legend</th>
            <th>Definition</th>
          </tr>
          @for (int i = 0; i < instrTypeLegend?.Length; i++)
            {
                <tr>
                    <td>@instrTypeLegend[i].Legend</td>
                    <td>@instrTypeLegend[i].Definition</td>
                </tr>
            }
        </table>

        <br />

        <table class="helpTable" style="width:70%">
          <tr>
            <th>Type</th>
            <th>Name</th>
            <th>Encoding</th>
            <th>Purpose</th>
          </tr>
          @for (int i = 0; i < instrType?.Length; i++)
            {
                if(instrType[i].Name == null)
                {
                    <tr style="height: 25px"></tr>
                }
                else
                {
                    <tr>
                        <td>@instrType[i].Type</td>
                        <td>@instrType[i].Name</td>
                        <td>@instrType[i].Encoding</td>
                        <td>@instrType[i].Purpose</td>
                    </tr>
                }
            }
          <tr>
              <th colspan=4>Notes</th>
          </tr>
          <tr>
              <td colspan=4>¹ Note: type will interpret the 'cccc' bits according to the opcode, either as addressing mode or as a second register</td>
          </tr>
          <tr>
              <td colspan=4>² Note: since encoding 0 is useless for the immediate in most instructions, '0000' encodes a 16. So the range of possible immediates is [1-16].</td>
          </tr>

        </table>
    </div>

    <div>
        <label class="helpLabel">Instructions</label>
        <table class="helpTable" style="width:90%">
            <tr>
                <th colspan=6>Process Control Instructions</th>
            </tr>
          <tr>
            <th>Name</th>
            <th>Mnemonic</th>
            <th>Type</th>
            <th>Op Code</th>
            <th>Example</th>
            <th>Notes</th>
          </tr>
          @for (int i = 0; i < instrs?.Length; i++)
            {
                if(instrs[i].Name == null)
                {
                    <tr style="height: 25px"></tr>
                }
                else if(instrs[i].Name == "Notes" || instrs[i].Name == "Decision Making" || instrs[i].Name == "Large Immediate Mathematics" || instrs[i].Name == "Small Immediate Mathematics" || instrs[i].Name == "Pure Register Instructions" || instrs[i].Name == "Register Management Instructions" || instrs[i].Name == "Memory Management Instructions" || instrs[i].Name == "Process Control Instructions")
                {
                    <tr>
                        <th colspan="6">@instrs[i].Name</th>
                    </tr>
                }
                else if(instrs[i].Mnemonic == null)
                {
                    <tr>
                        <td colspan="6">@instrs[i].Name</td>
                    </tr>
                }
                else if (instrs[i].Name == "Name")
                {
                    <tr>
                        <th>Name</th>
                        <th>Mnemonic</th>
                        <th>Type</th>
                        <th>Op Code</th>
                        <th>Example</th>
                        <th>Notes</th>
                      </tr>
                }
                else
                {
                    <tr>
                        <td>@instrs[i].Name</td>
                        <td>@instrs[i].Mnemonic</td>
                        <td>@instrs[i].Type</td>
                        <td>@instrs[i].OpCode</td>
                        <td>@instrs[i].Example</td>
                        <td>@instrs[i].Notes</td>
                    </tr>
                }
            }
        </table>
        <br />
    </div>
</div>


@code {
    bool darkModeHelpPage = FrontendVariables.darkMode;
    int numAddressingModes = 16;
    AddressingModes[]? addressMode;
    RegistersTable[]? registerTable;
    InstructionTypeLegend[]? instrTypeLegend;
    InstructionType[]? instrType;
    Instructions[]? instrs;

    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (darkModeHelpPage == true)
        {
            await JSRuntime.InvokeVoidAsync("toggleDarkModeJS", darkModeHelpPage);
            FrontendVariables.darkModeHelpPage = darkModeHelpPage;
            FrontendVariables.darkModeHelpChanged = true;
        }
    }

    public struct AddressingModes
    {
        public string Name {get; set; }
        public string Letters { get; set; }
        public string Binary { get; set; }
        public string Treatment { get; set; }
        public string Notes { get; set; }
    }

    public struct RegistersTable
    {
        public string Reg {get; set; }
        public string UseCase { get; set; }
    }

    public struct InstructionTypeLegend
    {
        public string Legend {get; set; }
        public string Definition { get; set; }
    }

    public struct InstructionType
    {
        public string Type {get; set; }
        public string Name { get; set; }
        public string Encoding { get; set; }
        public string Purpose { get; set; }
    }

    public struct Instructions
    {
        public string Name {get; set; }
        public string Mnemonic { get; set; }
        public string Type { get; set; }
        public string OpCode { get; set; }
        public string Example { get; set; }
        public string Notes { get; set; }
    }

    protected override void OnInitialized()
    {
        string filename = "Config Files/AddressingModes.json";
        string jsonString = File.ReadAllText(filename);
        addressMode = JsonSerializer.Deserialize<AddressingModes[]>(jsonString);

        filename = "Config Files/registers.json";
        jsonString = File.ReadAllText(filename);
        registerTable = JsonSerializer.Deserialize<RegistersTable[]>(jsonString);

        filename = "Config Files/TypesOfInstructionsLegend.json";
        jsonString = File.ReadAllText(filename);
        instrTypeLegend = JsonSerializer.Deserialize<InstructionTypeLegend[]>(jsonString);

        filename = "Config Files/TypesOfInstructionsType.json";
        jsonString = File.ReadAllText(filename);
        instrType = JsonSerializer.Deserialize<InstructionType[]>(jsonString);

        filename = "Config Files/instructions.json";
        jsonString = File.ReadAllText(filename);
        instrs = JsonSerializer.Deserialize<Instructions[]>(jsonString);
    }
}
@page "/help"

<style>
    table, th, td {
      border: 1px solid black;
      align-content: center;
    }

    th {
        background: darkgray;
        border: 2px solid black;
        font-size: 20px;
    }

    table {
        color: black;
        background: white;
        margin-left: auto;
        margin-right: auto;
        border: 2px solid black;
    }

    div {
        font-size: 18px;
        text-align: center;
    }

    label {
        font-size: 34px;
    }
</style>


<div class="code_input" style="width:100%">
    <br /><h1>IS Instruction Set Architecture</h1><br />

    <p style="font-size: 18px">
        Here you can find our entire instruction set up to this point as well as examples for each.
    </p>

    <div>
        <label>Addressing Modes</label>
        <table style="width:60%">
          <tr>
            <th>Name</th>
            <th>Letter</th>
            <th>Binary</th>
            <th>Treatment</th>
          </tr>
          <tr>
            <td>immediate</td>
            <td>i</td>
            <td>0000</td>
            <td>operand</td>
          </tr>
          <tr>
            <td>direct</td>
            <td>d</td>
            <td>0001</td>
            <td>Mem[operand]</td>
          </tr>
          <tr>
            <td>indirect</td>
            <td>dn</td>
            <td>0010</td>
            <td>Mem[Mem[operand]]</td>
          </tr>
          <tr>
            <td>register direct</td>
            <td>r</td>
            <td>0011</td>
            <td>Mem[register]</td>
          </tr>
          <tr>
            <td>register indirect</td>
            <td>rn</td>
            <td>0100</td>
            <td>Mem[Mem[register]]</td>
          </tr>
          <tr>
            <td>indexed direct</td>
            <td>xd</td>
            <td>0101</td>
            <td>Mem[r7 + operand]</td>
          </tr>
          <tr>
            <td>indexed indirect</td>
            <td>xn</td>
            <td>0110</td>
            <td>Mem[Mem[r7 + operand]]</td>
          </tr>
          <tr>
            <td>indexed offset</td>
            <td>xo</td>
            <td>0111</td>
            <td>Mem[Mem[r7] + operand]</td>
          </tr>
          <tr>
            <td>indexed deferred</td>
            <td>xf</td>
            <td>1000</td>
            <td>Mem[Mem[operand] + r7]</td>
          </tr>
          <tr>
            <td>stack direct</td>
            <td>sd</td>
            <td>1001</td>
            <td>Mem[SP + operand]</td>
          </tr>
          <tr>
            <td>stack indirect</td>
            <td>sn</td>
            <td>1010</td>
            <td>Mem[Mem[SP + operand]]</td>
          </tr>
          <tr>
            <td>stack offset</td>
            <td>so</td>
            <td>1011</td>
            <td>Mem[Mem[SP] + operand]</td>
          </tr>
          <tr>
            <td>stack indexed direct</td>
            <td>sxd</td>
            <td>1100</td>
            <td>Mem[SP + r7 + operand]</td>
          </tr>
          <tr>
            <td>stack indexed indirect</td>
            <td>sxn</td>
            <td>1101</td>
            <td>Mem[Mem[SP + r7 + operand]]</td>
          </tr>
          <tr>
            <td>stack indexed offset</td>
            <td>sxo</td>
            <td>1110</td>
            <td>Mem[Mem[SP + r7] + operand]</td>
          </tr>
          <tr>
            <td>stack indexed deferred</td>
            <td>sxf</td>
            <td>1111</td>
            <td>Mem[Mem[SP + operand] + r7]</td>
          </tr>
        </table>
    </div>

    <div>
        <label>Types of Instructions</label>
        <table style="width:60%">
          <tr>
            <th>Legend</th>
            <th>Definition</th>
          </tr>
          <tr>
            <td>o</td>
            <td>op code</td>
          </tr>
          <tr>
            <td>a</td>
            <td>address mode</td>
          </tr>
          <tr>
            <td>b</td>
            <td>whether working with high byte(1) or low byte(0) (only used by instructions that operate on bytes)</td>
          </tr>
          <tr>
            <td>r</td>
            <td>the first register specified (usually destination register)</td>
          </tr>
          <tr>
            <td>s</td>
            <td>the second register specified (usually source register 1)</td>
          </tr>
          <tr>
            <td>t</td>
            <td>the third register specified (usually source register 2)</td>
          </tr>
          <tr>
            <td>i</td>
            <td>immediate</td>
          </tr>
        </table>

        <br />

        <table style="width:70%">
          <tr>
            <th>Type</th>
            <th>Definition</th>
            <th>Format</th>
          </tr>
          <tr>
            <td>i-type</td>
            <td>immediate type: the following two bytes will be
            treated as an operand rather than another
            instruction<br />
            NOTE: the first bit will always be a 1. Only op codes starting
                   with a 1 will use the next two bytes as an operand</td>
            <td>10oo oooo aaaa brrr | iiii iiii iiii iiii</td>
          </tr>
          <tr>
            <td>j-type</td>
            <td>jump type: the following two bytes will be
            treated as an operand rather than another
            instruction</td>
            <td>11oo oooo osss brrr | iiii iiii iiii iiii</td>
          </tr>
          <tr>
            <td>r0-type</td>
            <td>no registers specified, pure opcode</td>
            <td>000o oooo oooo oooo</td>
          </tr>
           <tr>
            <td>r1-type</td>
            <td>register one type: two byte opcode involving one register</td>
            <td>001o oooo oooo brrr</td>
          </tr>
           <tr>
            <td>r2-type</td>
            <td>register three type: two byte opcode involving two registers</td>
            <td>010o oooo ooss srrr</td>
          </tr>
           <tr>
            <td>r3-type</td>
            <td>register three type: two byte opcode involving three registers</td>
            <td>011o ooot ttss srrr</td>
          </tr>
        </table>
    </div>

    <div>
        <label>Instructions</label>
        <table style="width:90%">
          <tr>
            <th>Name</th>
            <th>Mnemonic</th>
            <th>Type</th>
            <th>Op Code</th>
            <th>Example</th>
            <th>Example Pseudo Code</th>
            <th>Example Binary</th>
          </tr>
          <tr>
            <td>Load Word</td>
            <td>LDW</td>
            <td>i</td>
            <td>1000 0000</td>
            <td>LDW r1, r2, r</td>
            <td>r1 = Mem[r2]</td>
            <td>1000 0000 0011 0001 | 0000 0000 0000 0011</td>
          </tr>
          <tr>
            <td>Load High Byte</td>
            <td>LDH</td>
            <td>i</td>
            <td>1000 0001;b=1</td>
            <td>LDH r5, 15, i</td>
            <td>r5(high) = 15</td>
            <td>1000 0001 0000 1101 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Load Low Byte</td>
            <td>LDL</td>
            <td>i</td>
            <td>1000 0001;b=0</td>
            <td>LDL r2, 10, i</td>
            <td>r2(low) = 10</td>
            <td>1000 0001 0000 0011 | 0000 0000 0000 1010</td>
          </tr>
          <tr>
            <td>Store Word</td>
            <td>STW</td>
            <td>i</td>
            <td>1000 0010</td>
            <td>STW r1, label, d</td>
            <td>Mem[label] = r1</td>
            <td>1000 0010 0001 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Store High Byte</td>
            <td>STH</td>
            <td>i</td>
            <td>1000 0011;b=1</td>
            <td>STH r1, r2, rn</td>
            <td>Mem[Mem[r2]](high) = r1</td>
            <td>1000 0011 0100 1001 | 0000 0000 0000 0011</td>
          </tr>
          <tr>
            <td>Store Low Byte</td>
            <td>STL</td>
            <td>i</td>
            <td>1000 0011;b=0</td>
            <td>STL r2, r5, r</td>
            <td>Mem[r5](low) = r2</td>
            <td>1000 0011 0011 0010 | 0000 0000 0000 0101</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Halt Program</td>
            <td>HLT</td>
            <td>r0</td>
            <td>0000 ... 0000</td>
            <td>HLT</td>
            <td>Stop Program</td>
            <td>0000 0000 0000 0000</td>
          </tr>
          <tr>
            <td>No Operation</td>
            <td>NOP</td>
            <td>r0</td>
            <td>0000 ... 0001</td>
            <td>NOP</td>
            <td>No Operation</td>
            <td>0000 0000 0000 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Bitwise Add</td>
            <td>ADD</td>
            <td>r3</td>
            <td>0110 001</td>
            <td>ADD r1, r2, r3</td>
            <td>r1 = r2 + r3</td>
            <td>0110 0010 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Subtract </td>
            <td>SUB</td>
            <td>r3</td>
            <td>0110 010</td>
            <td>SUB r1, r2, r3</td>
            <td>r1 = r2 - r3</td>
            <td>0110 0100 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise And</td>
            <td>AND</td>
            <td>r3</td>
            <td>0110 011</td>
            <td>AND r1, r2, r3</td>
            <td>r1 = r2 & r3</td>
            <td>0110 0110 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Or</td>
            <td>OR</td>
            <td>r3</td>
            <td>0110 100</td>
            <td>OR  r1, r2, r3</td>
            <td>r1 = r2 | r3</td>
            <td>0110 1000 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Xor</td>
            <td>XOR</td>
            <td>r3</td>
            <td>0110 101</td>
            <td>XOR r1, r2, r3</td>
            <td>r1 = r2 ^ r3</td>
            <td>0110 1010 1101 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Bitwise Not</td>
            <td>NOT</td>
            <td>r2</td>
            <td>0100 0000 00</td>
            <td>NOT r1, r2</td>
            <td>r1 = ~r2</td>
            <td>0100 0000 0001 0001</td>
          </tr>
          <tr>
            <td>Bitwise Neg</td>
            <td>NEG</td>
            <td>r2</td>
            <td>0100 0000 01</td>
            <td>NEG r1, r2</td>
            <td>r1 = -r2</td>
            <td>0100 0000 0101 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Arith Shift Left</td>
            <td>ASL</td>
            <td>r3</td>
            <td>0110 110</td>
            <td>ASL r1, r2, r3</td>
            <td>r1 = r2 <img src="chevron-double-left.svg"/> r3</td>
            <td>0110 1100 1101 0001</td>
          </tr>
          <tr>
            <td>Arith Shift Right</td>
            <td>ASR</td>
            <td>r3</td>
            <td>0110 111</td>
            <td>ASR r1, r2, r3</td>
            <td>r1 = r2 <img src="chevron-double-right.svg"/> r3</td>
            <td>0110 1110 1101 0001</td>
          </tr>
          <tr>
            <td>Logic Shift Right</td>
            <td>LSR</td>
            <td>r3</td>
            <td>0111 000</td>
            <td>LSR r1, r2, r3</td>
            <td>r1 = r2 >>> r3 (java)</td>
            <td>0111 0000 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Left</td>
            <td>RTL</td>
            <td>r3</td>
            <td>0111 001</td>
            <td>RTL r1, r2, r3</td>
            <td>r1 = r2 rotated by r3</td>
            <td>0111 0010 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Right</td>
            <td>RTR</td>
            <td>r3</td>
            <td>0111 010</td>
            <td>RTR r1, r2, r3</td>
            <td>r1 = r2 rotated by r3</td>
            <td>0111 0100 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Left Carry</td>
            <td>RLC</td>
            <td>r3</td>
            <td>0111 011</td>
            <td>RLC r1, r2, r3</td>
            <td>r1 = r2 rotated by r3</td>
            <td>0111 0110 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Right Carry</td>
            <td>RRC</td>
            <td>r3</td>
            <td>0111 100</td>
            <td>RRC r1, r2, r3</td>
            <td>r1 = r2 rotated by r3</td>
            <td>0111 1000 1101 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Jump Unconditional</td>
            <td>TMP</td>
            <td>j</td>
            <td>1100 0000 0</td>
            <td>JMP label</td>
            <td>goto label</td>
            <td>1100 0000 0000 0000 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Jump Less Than</td>
            <td>JLT</td>
            <td>j</td>
            <td>1100 0000 1</td>
            <td>JLT r1, r2, label</td>
            <td>goto if r1 <img src="chevron-left.svg"/> r2</td>
            <td>1100 0000 1010 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Jump Greater Than</td>
            <td>JGT</td>
            <td>j</td>
            <td>1100 0001 0</td>
            <td>JGT r1, r2, label</td>
            <td>goto if r1 <img src="chevron-right.svg"/> r2</td>
            <td>1100 0001 0010 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Jump Less Equal</td>
            <td>JLE</td>
            <td>j</td>
            <td>1100 0001 1</td>
            <td>JLE r1, r2, label</td>
            <td>goto if r1 <img src="chevron-left.svg"/>= r2</td>
            <td>1100 0001 1010 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Jump Greater Equal</td>
            <td>JGE</td>
            <td>j</td>
            <td>1100 0010 0</td>
            <td>JGE r1, r2, label</td>
            <td>goto if r1 <img src="chevron-right.svg"/>= r2</td>
            <td>1100 0010 0010 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Jump Equal</td>
            <td>JEQ</td>
            <td>j</td>
            <td>1100 0010 1</td>
            <td>JEQ r1, r2, label</td>
            <td>goto if r1 == r2</td>
            <td>1100 0010 1010 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Jump Not Equal</td>
            <td>JNE</td>
            <td>j</td>
            <td>1100 0011 0</td>
            <td>JNE r1, r2, label</td>
            <td>goto if r1 != r2</td>
            <td>1100 0011 0010 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Loop</td>
            <td>LOP</td>
            <td>j</td>
            <td>1100 0011 1</td>
            <td>LOOP r1, label</td>
            <td>goto if r1 != 0 (r1--)</td>
            <td>1100 0011 1000 0001 | ???? ???? ???? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Call Procedure</td>
            <td>CAL</td>
            <td>j</td>
            <td>1110 0000 0</td>
            <td>CAL proc</td>
            <td>move PC into Stack, goto</td>
            <td>1110 0000 0000 0000 | ???? ???? ???? ????</td>
          </tr>
          <tr>
            <td>Return from Proc</td>
            <td>RET</td>
            <td>j</td>
            <td>1110 0000 1</td>
            <td>RET</td>
            <td>get PC from Stack, goto</td>
            <td>1110 0000 1000 0000 | ???? ???? ???? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Push word to stack</td>
            <td>PUSH</td>
            <td>r1</td>
            <td>0010 0000 0010</td>
            <td>PUSH r1</td>
            <td>move r1 onto stack</td>
            <td>0010 0000 0010 0001</td>
          </tr>
          <tr>
            <td>Push byte (high)</td>
            <td>PSHH</td>
            <td>r1</td>
            <td>0010 0000 0011;b=1</td>
            <td>PSHH r1</td>
            <td>move r1(high) to stack</td>
            <td>0010 0000 0011 1001</td>
          </tr>
          <tr>
            <td>Push byte (low)</td>
            <td>PSHL</td>
            <td>r1</td>
            <td>0010 0000 0011;b=0</td>
            <td>PSHL r1</td>
            <td>move r1(low) to stack</td>
            <td>0010 0000 0011 0001</td>
          </tr>
          <tr>
            <td>Pop word from stack</td>
            <td>POP</td>
            <td>r1</td>
            <td>0010 0000 0100</td>
            <td>POP r1</td>
            <td>move stack to r1</td>
            <td>0010 0000 0100 0001</td>
          </tr>
          <tr>
            <td>Pop byte (high)</td>
            <td>POPH</td>
            <td>r1</td>
            <td>0010 0000 0101;b=1</td>
            <td>POPH r1</td>
            <td>pop byte to r1(high)</td>
            <td>0010 0000 0101 1001</td>
          </tr>
          <tr>
            <td>Pop byte (low)</td>
            <td>POPL</td>
            <td>r1</td>
            <td>0010 0000 0101;b=0</td>
            <td>POPL r1</td>
            <td>pop byte to r1(low)</td>
            <td>0010 0000 0101 0001</td>
          </tr>
        </table>
    </div>
</div>




@code {

}

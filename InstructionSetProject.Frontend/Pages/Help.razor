@page "/help"

<style>
    table, th, td {
      border: 1px solid black;
      align-content: center;
    }

    th {
        background: darkgray;
        border: 2px solid black;
        font-size: 20px;
    }

    table {
        color: black;
        background: white;
        margin-left: auto;
        margin-right: auto;
        border: 2px solid black;
    }

    div {
        font-size: 18px;
        text-align: center;
    }

    label {
        font-size: 34px;
    }
</style>


<div class="code_input" style="width:100%">
    <br /><h1>IS Instruction Set Architecture</h1><br />

    <p style="font-size: 18px">
        Here you can find our entire instruction set up to this point as well as examples for each.
    </p>

    <div>
        <label>Addressing Modes</label>
        <table style="width:60%">
          <tr>
            <th>Name</th>
            <th>Letters</th>
            <th>Binary</th>
            <th>Treatment</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>immediate direct</td>
            <td>id</td>
            <td>0000</td>
            <td>Mem[operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>immediate indirect</td>
            <td>in</td>
            <td>0001</td>
            <td>Mem[Mem[operand]]</td>
            <td></td>
          </tr>
          <tr>
            <td>register direct</td>
            <td>rd</td>
            <td>0010</td>
            <td>Mem[register operand]</td>
            <td>Can only accept integer registers<br />
                (cannot have a floating-point address)</td>
          </tr>
          <tr>
            <td>register indirect</td>
            <td>rn</td>
            <td>0011</td>
            <td>Mem[Mem[register operand]]</td>
            <td>Can only accept integer registers<br />
                (cannot have a floating-point address)</td>
          </tr>
          <tr>
            <td>indexed direct</td>
            <td>xd</td>
            <td>0100</td>
            <td>Mem[r7 + operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>indexed indirect</td>
            <td>xn</td>
            <td>0101</td>
            <td>Mem[Mem[r7 + operand]]</td>
            <td></td>
          </tr>
          <tr>
            <td>indexed offset</td>
            <td>xo</td>
            <td>0110</td>
            <td>Mem[Mem[r7] + operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>indexed deferred</td>
            <td>xf</td>
            <td>0111</td>
            <td>Mem[Mem[operand] + r7]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack direct</td>
            <td>sd</td>
            <td>1000</td>
            <td>Mem[SP + operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack indirect</td>
            <td>sn</td>
            <td>1001</td>
            <td>Mem[Mem[SP + operand]]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack offset</td>
            <td>so</td>
            <td>1010</td>
            <td>Mem[Mem[SP] + operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack deferred</td>
            <td>sf</td>
            <td>1011</td>
            <td>Mem[SP + Mem[operand]]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack indexed direct</td>
            <td>sxd</td>
            <td>1100</td>
            <td>Mem[SP + r7 + operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack indexed indirect</td>
            <td>sxn</td>
            <td>1101</td>
            <td>Mem[Mem[SP + r7 + operand]]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack indexed offset</td>
            <td>sxo</td>
            <td>1110</td>
            <td>Mem[Mem[SP + r7] + operand]</td>
            <td></td>
          </tr>
          <tr>
            <td>stack indexed deferred</td>
            <td>sxf</td>
            <td>1111</td>
            <td>Mem[Mem[SP + operand] + r7]</td>
            <td></td>
          </tr>
        </table>
    </div>

    <div>
        <label>Registers</label>
        <table style="width:60%">
          <tr>
            <th colspan=2>Accessible</th>
          </tr>
          <tr>
            <th>Reg</th>
            <th>Use Case</th>
          </tr>
          <tr>
            <td>r0</td>
            <td>cannot be assigned to, hardcoded zero</td>
          </tr>
          <tr>
            <td>r1</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>r2</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>r3</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>r4</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>r5</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>r6</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>r7</td>
            <td>general purpose</td>
          </tr>
          <tr height="25px">
          </tr>
          <tr>
            <td>f0</td>
            <td>cannot be assigned to, hardcoded zero</td>
          </tr>
          <tr>
            <td>f1</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>f2</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>f3</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>f4</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>f5</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>f6</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <td>f7</td>
            <td>general purpose</td>
          </tr>
          <tr>
            <th colspan=2>Inaccessible</th>
          </tr>
          <tr>
            <th>Reg</th>
            <th>Use Case</th>
          </tr>
          <tr>
            <td>IP</td>
            <td>instruction pointer</td>
          </tr>
          <tr>
            <td>SP</td>
            <td>stack pointer</td>
          </tr>
          <tr>
            <td>FL</td>
            <td>flags registers</td>
          </tr>
          <tr>
            <td>MBP</td>
            <td>memory base pointer registers</td>
          </tr>
        </table>
    </div>

    <div>
        <label>Types of Instructions</label>
        <table style="width:60%">
          <tr>
            <th>Legend</th>
            <th>Definition</th>
          </tr>
          <tr>
            <td>0,1</td>
            <td>set bits, not changed per instruction</td>
          </tr>
          <tr>
            <td>o</td>
            <td>operand bits, encode each instruction</td>
          </tr>
          <tr>
            <td>c</td>
            <td>bits to encode conditions, such as address modes and jump conditions</td>
          </tr>
           <tr>
            <td>i</td>
            <td>bits to encode immediates</td>
          </tr>
          <tr>
            <td>r</td>
            <td>primary register, often destination register</td>
          </tr>
          <tr>
            <td>s</td>
            <td>secondary register, often source 1</td>
          </tr>
          <tr>
            <td>t</td>
            <td>tertiary register, often source 2</td>
          </tr>
         
        </table>

        <br />

        <table style="width:70%">
          <tr>
            <th>Type</th>
            <th>Name</th>
            <th>Encoding</th>
            <th>Purpose</th>
          </tr>
          <tr>
            <td>00 0</td>
            <td>r2-type</td>
            <td>000o oooo ooss srrr</td>
            <td>Involves 2 Integer Registers</td>
          </tr>
          <tr>
            <td>00 1</td>
            <td>f2-type</td>
            <td>001o oooo ooss srrr</td>
            <td>Involves 2 Floating Point Registers</td>
          </tr>
          <tr style="height: 20px">
          </tr>
          <tr>
            <td>01 0</td>
            <td>r3-type</td>
            <td>010o ooot ttss srrr</td>
            <td>Involves 3 Integer Registers</td>
          </tr>
          <tr>
            <td>01 1</td>
            <td>f3-type</td>
            <td>011o ooot ttss srrr</td>
            <td>Involves 3 Floating Point Registers</td>
          </tr>
          <tr style="height: 20px">
          </tr>
           <tr>
            <td>10 0</td>
            <td>rs-type²</td>
            <td>100o ooii iiss srrr</td>
            <td>See note. Involves 2 Integer Registers and a Small immediate (1-16)</td>
          </tr>
          <tr>
            <td>10 1</td>
            <td>fs-type²</td>
            <td>101o ooii iiss srrr</td>
            <td>See note. Involves 2 Floating Point Registers and a Small immediate (1-16)</td>
          </tr>
          <tr style="height: 20px">
          </tr>
           <tr>
            <td>11 0</td>
            <td>rm-type¹</td>
            <td>110o oooo occc crrr | iiii iiii iiii iiii</td>
            <td>See note. 1 or 2 Registers with large immediate, possibly with addressing mode</td>
          </tr>
          <tr>
            <td>11 1</td>
            <td>fm-type¹</td>
            <td>111o oooo occc crrr | iiii iiii iiii iiii</td>
            <td>See note. 1 or 2 Registers with large immediate, possibly with addressing mode</td>
          </tr>
          <tr>
              <th colspan=4>Notes</th>
          </tr>
          <tr>
              <td colspan=4>¹ Note: type will interpret the 'cccc' bits according to the opcode, either as addressing mode or as a second register</td>
          </tr>
          <tr>
              <td colspan=4>² Note: since encoding 0 is useless for the immediate in most instructions, '0000' encodes a 16. So the range of possible immediates is [1-16].</td>
          </tr>

        </table>
    </div>

    <div>
        <label>Instructions</label>
        <table style="width:90%">
            <tr>
                <th colspan=6>Process Control Instructions</th>
            </tr>
          <tr>
            <th>Name</th>
            <th>Mnemonic</th>
            <th>Type</th>
            <th>Op Code</th>
            <th>Example</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>Halt Program</td>
            <td>HLT</td>
            <td>r2</td>
            <td>0000 0000 00.. ....</td>
            <td>HLT</td>
            <td></td>
          </tr>
          <tr>
            <td>No Operation</td>
            <td>NOP</td>
            <td>r2</td>
            <td>0000 0000 01.. ....</td>
            <td>NOP</td>
            <td></td>
          </tr>
          <tr style="height: 20px">
          </tr>
          <tr>
            <td>Call Procedure</td>
            <td>CAL</td>
            <td>rm</td>
            <td>1101 0000 0... ....</td>
            <td>CAL proc</td>
            <td>Push IP; Load IP with proc; Jump</td>
          </tr>
          <tr>
            <td>Return from Procedure</td>
            <td>RET</td>
            <td>r2</td>
            <td>0000 0000 11.. ....</td>
            <td>RET</td>
            <td>Pop IP; Jump</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <th colspan=6>Memory Management Instructions</th>
          </tr>
          <tr>
            <th>Name</th>
            <th>Mnemonic</th>
            <th>Type</th>
            <th>Op Code</th>
            <th>Example</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>Load Word</td>
            <td>LDW</td>
            <td>m</td>
            <td>1000 0000 0</td>
            <td>LDW r1, r2, rd</td>
            <td>r1 = Mem[r2]</td>
            <td>1000 0000 0001 1001 | 0000 0000 0000 0010</td>
          </tr>
          <tr>
            <td>Store Word</td>
            <td>STW</td>
            <td>m</td>
            <td>1000 0000 1</td>
            <td>STW r1, label, id</td>
            <td>Mem[label] = r1</td>
            <td>1000 0000 1000 1001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Load Low Byte</td>
            <td>LDL</td>
            <td>m</td>
            <td>1000 0001 0</td>
            <td>LDL r1, 15, i</td>
            <td>r1<img src="chevron-left.svg"/>8..0<img src="chevron-right.svg"/> = 15</td>
            <td>1000 0001 0000 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Store Low Byte</td>
            <td>STL</td>
            <td>m</td>
            <td>1000 0001 1</td>
            <td>STL r1, label, id</td>
            <td>Mem[label]<img src="chevron-left.svg"/>8..0<img src="chevron-right.svg"/> = r1</td>
            <td>1000 0001 1000 1001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Load High Byte</td>
            <td>LDH</td>
            <td>m</td>
            <td>1000 0010 0</td>
            <td>LDH r1, 15, i</td>
            <td>r1<img src="chevron-left.svg"/>16..9<img src="chevron-right.svg"/> = 15</td>
            <td>1000 0010 0000 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Store High Byte</td>
            <td>STH</td>
            <td>m</td>
            <td>1000 0010 1</td>
            <td>STH r1, label, id</td>
            <td>Mem[label]<img src="chevron-left.svg"/>16..9<img src="chevron-right.svg"/> = r1</td>
            <td>1000 0010 1000 1001 | ???? ? label ? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Move reg to reg</td>
            <td>MOV</td>
            <td colspan=2>/* 'ADD r#, r#, r0' */</td>
            <td>MOV r1, r2</td>
            <td>r1 = r2</td>
            <td> </td>
          </tr>
          <tr>
            <td>Move imm to reg</td>
            <td>MVI</td>
            <td colspan=2>/* 'ADI r#, r0, imm' */</td>
            <td>MVI r1, 15</td>
            <td>r1 = 15</td>
            <td> </td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Exchange</td>
            <td>XCH</td>
            <td>r2</td>
            <td>0100 0000 00</td>
            <td>XCH r1, r2</td>
            <td>(r1,r2) = (r2,r1) (python)</td>
            <td>0100 0000 0001 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Exchange Equal</td>
            <td>XEQ</td>
            <td>r2</td>
            <td>0100 0000 01</td>
            <td>XEQ r1, r2</td>
            <td>r1 = r2 if [Z]</td>
            <td>0100 0000 0101 0001</td>
          </tr>
          <tr>
            <td>Exchange Not Equal</td>
            <td>XNE</td>
            <td>r2</td>
            <td>0100 0000 10</td>
            <td>XNE r1, r2</td>
            <td>r1 = r2 if [!Z]</td>
            <td>0100 0000 1001 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Exchange Less Than</td>
            <td>XLT</td>
            <td>r2</td>
            <td>0100 0001 11</td>
            <td>XLT r1, r2</td>
            <td>r1 = r2 if [S != O]</td>
            <td>0100 0000 1101 0001</td>
          </tr>
          <tr>
            <td>Exchange Greater Than</td>
            <td>XGT</td>
            <td>r2</td>
            <td>0100 0001 00</td>
            <td>XGT r1, r2</td>
            <td>r1 = r2 if [!Z & (S==F)]</td>
            <td>0100 0001 0001 0001</td>
          </tr>
          <tr>
            <td>Exchange Less Equal</td>
            <td>XLE</td>
            <td>r2</td>
            <td>0100 0001 01</td>
            <td>XLE r1, r2</td>
            <td>r1 = r2 if [Z | (S!=O)]</td>
            <td>0100 0001 0101 0001</td>
          </tr>
          <tr>
            <td>Exchange Greater Equal</td>
            <td>XGE</td>
            <td>r2</td>
            <td>0100 0001 10</td>
            <td>XGE r1, r2</td>
            <td>r1 = r2 if [S==O]</td>
            <td>0100 0001 1001 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Exchange Above Than</td>
            <td>XAT</td>
            <td>r2</td>
            <td>0100 0001 11</td>
            <td>XAT r1, r2</td>
            <td>r1 = r2 if [!C & !Z]</td>
            <td>0100 0001 1101 0001</td>
          </tr>
          <tr>
            <td>Exchange Below Than</td>
            <td>XBT</td>
            <td>r2 </td>
            <td>0100 0010 00</td>
            <td>XBT r1, r2</td>
            <td>r1 = r2 if [C]</td>
            <td>0100 0010 0001 0001</td>
          </tr>
          <tr>
            <td>Exchange Above Equal</td>
            <td>XAE</td>
            <td>r2</td>
            <td>0100 0010 01</td>
            <td>XAE r1, r2</td>
            <td>r1 = r2 if [!C]</td>
            <td>0100 0010 0101 0001</td>
          </tr>
          <tr>
            <td>Exchange Below Equal</td>
            <td>XBE</td>
            <td>r2 </td>
            <td>0100 0010 10</td>
            <td>XBE r1, r2</td>
            <td>r1 = r2 if [C | Z]</td>
            <td>0100 0010 1001 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Exchange Zero</td>
            <td>XYZ</td>
            <td>r2</td>
            <td>0100 0010 11</td>
            <td>XYZ r1, r2</td>
            <td>r1 = r2 if [Z]</td>
            <td>0100 0010 1101 0001</td>
          </tr>
          <tr>
            <td>Exchange Not Zero</td>
            <td>XNZ</td>
            <td>r2</td>
            <td>0100 0011 00</td>
            <td>XNZ r1, r2</td>
            <td>r1 = r2 if [!Z]</td>
            <td>0100 0011 0001 0001</td>
          </tr>
          <tr>
            <td>Exchange Carry</td>
            <td>XYC</td>
            <td>r2</td>
            <td>0100 0011 01</td>
            <td>XYC r1, r2</td>
            <td>r1 = r2 if [C]</td>
            <td>0100 0011 0101 0001</td>
          </tr>
          <tr>
            <td>Exchange Not Carry</td>
            <td>XNC</td>
            <td>r2</td>
            <td>0100 0011 10</td>
            <td>XNC r1, r2</td>
            <td>r1 = r2 if [!C]</td>
            <td>0100 0011 1001 0001</td>
          </tr>
`         <tr>
            <td>Exchange Overflow</td>
            <td>XYO</td>
            <td>r2</td>
            <td>0100 0011 11</td>
            <td>XYO r1, r2</td>
            <td>r1 = r2 if [O]</td>
            <td>0100 0011 1101 0001</td>
          </tr>
          <tr>
            <td>Exchange Not Overflow</td>
            <td>XNO</td>
            <td>r2</td>
            <td>0100 0100 00</td>
            <td>XNO r1, r2</td>
            <td>r1 = r2 if [!O]</td>
            <td>0100 0100 0001 0001</td>
          </tr>
          <tr>
            <td>Exchange Sign</td>
            <td>XYS</td>
            <td>r2</td>
            <td>0100 0100 01</td>
            <td>XYS r1, r2</td>
            <td>r1 = r2 if [S]</td>
            <td>0100 0100 0101 0001</td>
          </tr>
          <tr>
            <td>Exchange Not Sign</td>
            <td>XNS</td>
            <td>r2</td>
            <td>0100 0100 10</td>
            <td>XNS r1, r2</td>
            <td>r1 = r2 if [!S]</td>
            <td>0100 0100 1001 0001</td> 
          </tr>
          <tr>
            <td>Exchange Parity</td>
            <td>XYP</td>
            <td>r2</td>
            <td>0100 0100 11</td>
            <td>XYP r1, r2</td>
            <td>r1 = r2 if [P]</td>
            <td>0100 0100 1101 0001</td>
          </tr>
          <tr>
            <td>Exchange Not Parity</td>
            <td>XNP</td>
            <td>r2</td>
            <td>0100 0101 00</td>
            <td>XNP r1, r2</td>
            <td>r1 = r2 if [!P]</td>
            <td>0100 0101 0001 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Bitwise Add</td>
            <td>ADD</td>
            <td>r3</td>
            <td>0110 000</td>
            <td>ADD r1, r2, r3</td>
            <td>r1 = r2 + r3</td>
            <td>0110 0000 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Add w/ Carry</td>
            <td>ADC</td>
            <td>r3</td>
            <td>0110 001</td>
            <td>ADC r1, r2, r3</td>
            <td>r1 = r2 + r3 + CF</td>
            <td>0110 0010 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Subtract</td>
            <td>SUB</td>
            <td>r3</td>
            <td>0110 010</td>
            <td>SUB r1, r2, r3</td>
            <td>r1 = r2 - r3</td>
            <td>0110 0100 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Sub w/ Borrow</td>
            <td>SBB</td>
            <td>r3</td>
            <td>0110 011</td>
            <td>SBC r1, r2, r3</td>
            <td>r1 = r2 - r3 - CF</td>
            <td>0110 0110 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise And</td>
            <td>AND</td>
            <td>r3</td>
            <td>0110 100</td>
            <td>AND r1, r2, r3</td>
            <td>r1 = r2 & r3</td>
            <td>0110 1000 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Or</td>
            <td>ORR</td>
            <td>r3</td>
            <td>0110 101</td>
            <td>OR r1, r2, r3</td>
            <td>r1 = r2 | r3</td>
            <td>0110 1010 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Xor</td>
            <td>XOR</td>
            <td>r3</td>
            <td>0110 110</td>
            <td>XOR r1, r2, r3</td>
            <td>r1 = r2 ^ r3</td>
            <td>0110 1100 1101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Multiply¹</td>
            <td>MUL</td>
            <td>r3</td>
            <td>0110 111</td>
            <td>MUL r2, r3, r4</td>
            <td>[r(2-1),r1] = r3 * r4</td>
            <td>0110 1111 0001 1010</td>
          </tr>
          <tr>
            <td>Bitwise Divide¹</td>
            <td>DIV</td>
            <td>r3</td>
            <td>0111 000</td>
            <td>DIV r2, r3, r4</td>
            <td>r2 = r3/r4, r(2-1) = r3%r4</td>
            <td>0111 0001 0001 1010</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Bitwise Not</td>
            <td>NOT</td>
            <td>r2</td>
            <td>0100 0101 01</td>
            <td>NOT r1, r2</td>
            <td>r1 = ~r2</td>
            <td>0100 0101 0101 0001</td>
          </tr>
          <tr>
            <td>Bitwise Neg</td>
            <td>NEG</td>
            <td>r2</td>
            <td>0100 0101 10</td>
            <td>NEG r1, r2</td>
            <td>r1 = -r2</td>
            <td>0100 0101 1001 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Bitwise Add Imm</td>
            <td>ADI</td>
            <td>r2i</td>
            <td>1100 0000 00</td>
            <td>ADI r1, r2, 15</td>
            <td>r1 = r2 + 15</td>
            <td>1100 0000 0001 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Bitwise Subtract Imm</td>
            <td>SBI</td>
            <td>r2i</td>
            <td>1100 0000 01</td>
            <td>SBI r1, r2, 15</td>
            <td>r1 = r2 - 15</td>
            <td>1100 0000 0101 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Bit. Add Imm w/ Carry</td>
            <td>ACI</td>
            <td>r2i</td>
            <td>1100 0000 10</td>
            <td>ACI r1, r2, 15</td>
            <td>r1 = r2 + 15 + CF</td>
            <td>1100 0000 1001 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Bit. Sub Imm w/ Borrow</td>
            <td>SBI</td>
            <td>r2i</td>
            <td>1100 0000 11</td>
            <td>SBI r1, r2, 15</td>
            <td>r1 = r2 - 15 - CF</td>
            <td>1100 0000 1101 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Bitwise And Imm</td>
            <td>ANI</td>
            <td>r2i</td>
            <td>1100 0001 00</td>
            <td>ANI r1, r2, 15</td>
            <td>r1 = r2 & 15</td>
            <td>1100 0001 0001 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr>
            <td>Bitwise Or Imm</td>
            <td>ORI</td>
            <td>r2i</td>
            <td>1100 0001 01</td>
            <td>ORI r1, r2, 15</td>
            <td>r1 = r2 | 15</td>
            <td>1100 0001 0101 0001 | 0000 0000 0000 1111</td>
          </tr>
`         <tr>
            <td>Bitwise Xor Imm</td>
            <td>XRI</td>
            <td>r2i</td>
            <td>1100 0001 10</td>
            <td>XRI r1, r2, 15</td>
            <td>r1 = r2 ^ 15</td>
            <td>1100 0001 1001 0001 | 0000 0000 0000 1111</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Arith. Shift Left</td>
            <td>ASL</td>
            <td>r3</td>
            <td>0111 001</td>
            <td>ASL r1, r2, r3</td>
            <td>r1 = r2 <img src="chevron-double-left.svg"/> r3</td>
            <td>0111 0010 1101 0001</td>
          </tr>
          <tr>
            <td>Arith. Shift Right</td>
            <td>ASR</td>
            <td>r3</td>
            <td>0111 010</td>
            <td>ASR r1, r2, r3</td>
            <td>r1 = r2 <img src="chevron-double-right.svg"/> r3</td>
            <td>0111 0100 1101 0001</td>
          </tr>
          <tr>
            <td>Logic Shift Left</td>
            <td>LSL</td>
            <td colspan=2>/* Use ASL r#, r#, r# */</td>
            <td>LSL r1, r2, r3</td>
            <td>r1 = r2 <img src="chevron-double-left.svg"/> r3</td>
          </tr>
          <tr>
            <td>Logic Shift Right</td>
            <td>LSR</td>
            <td>r3</td>
            <td>0111 011</td>
            <td>LSR r1, r2, r3</td>
            <td>r1 = r2 >>> r3 (java)</td>
            <td>0111 0110 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Left</td>
            <td>RTL</td>
            <td>r3</td>
            <td>0111 100</td>
            <td>RTL r1, r2, r3</td>
            <td>r1 = r2 rotated by r3</td>
            <td>0111 1000 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Right</td>
            <td>RTR</td>
            <td>r3</td>
            <td>0111 101</td>
            <td>RTR r1, r2, r3</td>
            <td>r1 = r2 rotated by r3</td>
            <td>0111 1010 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Left w/ Carry</td>
            <td>RLC</td>
            <td>r3</td>
            <td>0111 110</td>
            <td>RLC r1, r2, r3</td>
            <td>r1 = [CF,r2] rotated by r3</td>
            <td>0111 1100 1101 0001</td>
          </tr>
          <tr>
            <td>Rotate Right w/ Carry</td>
            <td>RRC</td>
            <td>r3</td>
            <td>0111 111</td>
            <td>RRC r1, r2, r3</td>
            <td>r1 = [r2,CF] rotated by r3</td>
            <td>0111 1110 1101 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Compare</td>
            <td>CMP</td>
            <td>r2</td>
            <td>0100 0101 11</td>
            <td>CMP r1, r2</td>
            <td>flags set by r1 - r2</td>
            <td>0100 0101 1110 0001</td>
          </tr>
          <tr>
            <td>Test</td>
            <td>TST</td>
            <td>r2</td>
            <td>0100 0110 00</td>
            <td>TST r1, r2</td>
            <td>flags set by r1 & r2</td>
            <td>0100 0110 0010 0001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Set Flags explicit</td>
            <td>FLG</td>
            <td>r1</td>
            <td>0010 0000 0000 0</td>
            <td>FLG r1</td>
            <td>flags set with r1<img src="chevron-left.svg"/>5..0<img src="chevron-right.svg"/></td>
            <td>0010 0000 0000 0001</td>
          </tr>
          <tr>
            <td>Set Flags w/ reg val</td>
            <td>FLR</td>
            <td>r1</td>
            <td>0010 0000 0000 1</td>
            <td>FLR r1</td>
            <td>flags set by r1</td>
            <td>0010 0000 0000 1001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Jump Unconditional</td>
            <td>JMP</td>
            <td>j</td>
            <td>1010 0000 0</td>
            <td>JMP label</td>
            <td>jump to label</td>
            <td>1010 0000 0000 0000 | ???? ? label ? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Jump Equal</td>
            <td>JEQ</td>
            <td>j</td>
            <td>1010 0000 01</td>
            <td>JEQ r1, r2, label</td>
            <td>jump if [Z]</td>
            <td>1010 0000 0101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Not Equal</td>
            <td>JNE</td>
            <td>j</td>
            <td>1010 0000 10</td>
            <td>JNE r1, r2, label</td>
            <td>jump if [!Z]</td>
            <td>1010 0000 1001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Jump Less Than</td>
            <td>JLT</td>
            <td>j</td>
            <td>1010 0000 11</td>
            <td>JLT r1, r2, label</td>
            <td>jump if [S!=O]</td>
            <td>1010 0000 1101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Greater Than</td>
            <td>JGT</td>
            <td>j</td>
            <td>1010 0001 00</td>
            <td>JGT r1, r2, label</td>
            <td>jump if [!Z & !S]</td>
            <td>1010 0001 0001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Less Equal</td>
            <td>JLE</td>
            <td>j</td>
            <td>1010 0001 01</td>
            <td>JLE r1, r2, label</td>
            <td>jump if [Z | (S != O)]</td>
            <td>1010 0001 0101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Greater Equal</td>
            <td>JGE</td>
            <td>j</td>
            <td>1010 0001 10</td>
            <td>JGE r1, r2, label</td>
            <td>jump if [S==O]</td>
            <td>1010 0001 1001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Jump Above Than</td>
            <td>JAT</td>
            <td>j</td>
            <td>1010 0001 11</td>
            <td>JAT r1, r2, label</td>
            <td>jump if [!C & !Z]</td>
            <td>1010 0001 1101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Below Than</td>
            <td>JBT</td>
            <td>j</td>
            <td>1010 0010 00</td>
            <td>JBT r1, r2, label</td>
            <td>jump if [C]</td>
            <td>1010 0010 0001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Above Equal</td>
            <td>JAE</td>
            <td>j</td>
            <td>1010 0010 01</td>
            <td>JAE r1, r2, label</td>
            <td>jump if [!C]</td>
            <td>1010 0010 0101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Below Equal</td>
            <td>JBE</td>
            <td>j</td>
            <td>1010 0010 10</td>
            <td>JBE r1, r2, label</td>
            <td>jump if [C | Z]</td>
            <td>1010 0010 1001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Jump Zero</td>
            <td>JYZ</td>
            <td>j</td>
            <td>1010 0010 11</td>
            <td>JYZ r1, r2, label</td>
            <td>jump if [Z]</td>
            <td>1010 0010 1101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Not Zero</td>
            <td>JNZ</td>
            <td>j</td>
            <td>1010 0011 00</td>
            <td>JNZ r1, r2, label</td>
            <td>jump if [!Z]</td>
            <td>1010 0011 0001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Carry</td>
            <td>JYC</td>
            <td>j</td>
            <td>1010 0011 01</td>
            <td>JYC r1, r2, label</td>
            <td>jump if [C]</td>
            <td>1010 0011 0101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Not Carry</td>
            <td>JNC</td>
            <td>j</td>
            <td>1010 0011 10</td>
            <td>JNC r1, r2, label</td>
            <td>jump if [!C]</td>
            <td>1010 0011 1001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Overflow</td>
            <td>JYO</td>
            <td>j</td>
            <td>1010 0011 11</td>
            <td>JYO r1, r2, label</td>
            <td>jump if [O]</td>
            <td>1010 0011 1101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Not Overflow</td>
            <td>JNO</td>
            <td>j</td>
            <td>1010 0100 00</td>
            <td>JNO r1, r2, label</td>
            <td>jump if [!O]</td>
            <td>1010 0100 0001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Sign</td>
            <td>JYS</td>
            <td>j</td>
            <td>1010 0100 01</td>
            <td>JYS r1, r2, label</td>
            <td>jump if [S]</td>
            <td>1010 0100 0101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Not Sign</td>
            <td>JNS</td>
            <td>j</td>
            <td>1010 0100 10</td>
            <td>JNS r1, r2, label</td>
            <td>jump if [!S]</td>
            <td>1010 0100 1001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Parity</td>
            <td>JYP</td>
            <td>j</td>
            <td>1010 0100 11</td>
            <td>JYP r1, r2, label</td>
            <td>jump if [P]</td>
            <td>1010 0100 1101 0001 | ???? ? label ? ????</td>
          </tr>
          <tr>
            <td>Jump Not Parity</td>
            <td>JNP</td>
            <td>j</td>
            <td>1010 0101 00</td>
            <td>JNP r1, r2, label</td>
            <td>jump if [!P]</td>
            <td>1010 0101 0001 0001 | ???? ? label ? ????</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Loop Not Zero & Dec</td>
            <td>LOP</td>
            <td>j</td>
            <td>1010 0101 01</td>
            <td>LOP r1, r2, label</td>
            <td>jump if [!Z]; r1 = r1 - 1</td>
            <td>1010 0101 0101 0001 | ???? ? label ? ????</td>
          </tr> 
          <tr style="height: 25px">
          </tr>
          <tr>
            <td>Push Word to stack</td>
            <td>PSW</td>
            <td>r1</td>
            <td>0010 0000 0001 0</td>
            <td>PSW r1</td>
            <td>push r1 to stack</td>
            <td>0010 0000 0001 0001</td>
          </tr>
          <tr>
            <td>Push Byte (low)</td>
            <td>PSL</td>
            <td>r1</td>
            <td>0010 0000 0001 1</td>
            <td>PSL r1</td>
            <td>push r1<img src="chevron-left.svg"/>8..0<img src="chevron-right.svg"/> to stack</td>
            <td>0010 0000 0001 1001</td>
          </tr>
          <tr>
            <td>Push Byte (high)</td>
            <td>PSH</td>
            <td>r1</td>
            <td>0010 0000 0010 0</td>
            <td>PSH r1</td>
            <td>push r1<img src="chevron-left.svg"/>16..9<img src="chevron-right.svg"/> to stack</td>
            <td>0010 0000 0010 0001</td>
          </tr>
          <tr>
            <td>Pop Word from stack</td>
            <td>PPW</td>
            <td>r1</td>
            <td>0010 0000 0010 1</td>
            <td>PPW r1</td>
            <td>pop from stack to r1</td>
            <td>0010 0000 0010 1001</td>
          </tr>
          <tr>
            <td>Pop Byte (low)</td>
            <td>PPL</td>
            <td>r1</td>
            <td>0010 0000 0011 0</td>
            <td>PPL r1</td>
            <td>pop from stack to r1<img src="chevron-left.svg"/>8..0<img src="chevron-right.svg"/></td>
            <td>0010 0000 0011 0001</td>
          </tr>
          <tr>
            <td>Pop Byte (high)</td>
            <td>PPH</td>
            <td>r1</td>
            <td>0010 0000 0011 1</td>
            <td>PPH r1</td>
            <td>pop from stack to r1<img src="chevron-left.svg"/>16..9<img src="chevron-right.svg"/></td>
            <td>0010 0000 0011 1001</td>
          </tr>
          <tr style="height: 25px">
          </tr>
          
        </table>
    </div>
</div>




@code {

}

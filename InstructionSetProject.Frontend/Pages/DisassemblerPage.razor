@page "/disassembler"
@using InstructionSetProject.Backend;
@using InstructionSetProject.Backend.StaticFrontend;
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime


<div class="code_input">
    <div class="code_input_wrapper">
        <div class="row">
            <div class="col-sm-5">
                <div class="row">
                    <div class="col-sm-6 disLabel">
                        <label for="disassemble">Disassembler</label>
                        <h6>(Machine Code)</h6>
                    </div>
                    <div class="col-sm-6 fileLoad">
                        <InputFile OnChange="@LoadFile" accept=".txt"></InputFile>
                    </div>

                </div> 
                
            </div>
    
            <div class="col-sm-2"></div>


            <div class="col-sm-5">
                <label for="outputDis">Output</label>
                <h6>(Assembly Table)</h6>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-5">
                <textarea @bind="currentCodeDis" id="disassemble" name="disassemble" placeholder="@machinePlaceholder"></textarea>
                <p>
                    <button @onclick="SaveMachineCode" type="button" name="dis_btn" class="btn btn-primary btn-lg">Save Code</button>
                    <button @onclick="OpenMachineCodeExecuter" type="button" name="dis_exec_btn" class="btn btn-primary btn-lg float-end">Open Executer</button>
                </p>
            </div>
    
            <div class="col-sm-2">
                <div>
                    <button @onclick="Disassemble" type="button" name="dis_btn" class="btn btn-primary btn-lg">
                        <img src="chevron-double-right.svg"/>
                    </button>
                </div>
            </div>
    
            <div class="col-sm-5">
                <textarea @bind="currentCodeOutDis" id="outputDis" name="outputDis" readonly></textarea>
                <p>
                    <button @onclick="SaveOutput" type="button" name="dis_btn" class="btn btn-primary btn-lg">Save Output</button>
                </p>
            </div>
        </div>
    </div>
</div>

@code {

    public string currentCodeDis { get; set; }
    private string currentCodeOutDis { get; set; }
    private string machinePlaceholder = "60 D1 64 D1...";

    private string output { get; set; }

    private List<byte> machineCode;
    private string machineCodeString { get; set; }

    private int totalInstructions { get; set; }
    private int arithmeticInstructions { get; set; }
    private int generalInstructions { get; set; }
    private int jumpInstructions { get; set; }
    private int stackInstructions { get; set; }

    private int immediateAddrMode { get; set; }
    private int directAddrMode { get; set; }
    private int indirectAddrMode { get; set; }
    private int registerDirectAddrMode { get; set; }
    private int registerIndirectAddrMode { get; set; }
    private int indexDirectAddrMode { get; set; }
    private int indexIndirectAddrMode { get; set; }
    private int indexOffsetAddrMode { get; set; }
    private int indexDefferedAddrMode { get; set; }
    private int stackDirectAddrMode { get; set; }
    private int stackIndirectAddrMode { get; set; }
    private int stackOffsetAddrMode { get; set; }
    private int stackIndexDirectAddrMode { get; set; }
    private int stackIndexIndirectAddrMode { get; set; }
    private int stackIndexOffsetAddrMode { get; set; }
    private int stackIndexDefferedAddrMode { get; set; }

    private string fileContent = "";
    private string assemblyCode = "";

    public DisassemblerPage()
    {
    }

    private void Disassemble()
    {

        machineCodeString = currentCodeDis.Replace(" ", string.Empty);
        machineCode = HexStringToByteList(machineCodeString);
        output = Disassembler.Disassemble(machineCode);
        assemblyCode = Disassembler.assemblyCode;

        totalInstructions = Disassembler.totalInstructions;
        arithmeticInstructions = Disassembler.arithmeticInstructions;
        generalInstructions = Disassembler.generalInstructions;
        jumpInstructions = Disassembler.jumpInstructions;
        stackInstructions = Disassembler.stackInstructions;

        immediateAddrMode = Disassembler.immediateAddrMode;
        directAddrMode = Disassembler.directAddrMode;
        indirectAddrMode = Disassembler.indirectAddrMode;
        registerDirectAddrMode = Disassembler.registerDirectAddrMode;
        registerIndirectAddrMode = Disassembler.registerIndirectAddrMode;
        indexDirectAddrMode = Disassembler.indexDirectAddrMode;
        indexIndirectAddrMode = Disassembler.indexIndirectAddrMode;
        indexOffsetAddrMode = Disassembler.indexOffsetAddrMode;
        indexDefferedAddrMode = Disassembler.indexDefferedAddrMode;
        stackDirectAddrMode = Disassembler.stackDirectAddrMode;
        stackIndirectAddrMode = Disassembler.stackIndirectAddrMode;
        stackOffsetAddrMode = Disassembler.stackOffsetAddrMode;
        stackIndexDirectAddrMode = Disassembler.stackIndexDirectAddrMode;
        stackIndexIndirectAddrMode = Disassembler.stackIndexIndirectAddrMode;
        stackIndexOffsetAddrMode = Disassembler.stackIndexOffsetAddrMode;
        stackIndexDefferedAddrMode = Disassembler.stackIndexDefferedAddrMode;

        OutputFromDis(output);
    }

    private static List<byte> HexStringToByteList(string machineCodeString) 
    {
        if (machineCodeString.Length % 2 == 1)
            throw new Exception("Cannot have an odd number of digits!!");

        int numChars = machineCodeString.Length;
        byte[] bytes = new byte[numChars / 2];
        for (int i = 0; i < numChars; i += 2)
            bytes[i / 2] = Convert.ToByte(machineCodeString.Substring(i, 2), 16);

        List<byte> mCode = new List<byte>(bytes);

        return mCode;
    }


    private void OutputFromDis(string assembly)
    {
        // Should do some stuff instead of just printing it back and forth
        string returnStr = "";
        returnStr += "Prog Count  Type   Opcode       Instruction\n" +
                     "----------  ----   ------    -----------------\n";

        returnStr += assembly;

        returnStr += "\n\nSummary Statistics\n" +
                     "------------------\n" +
                     "Total Instructions:           " + totalInstructions + "\n" +
                     "Arithmetic Instructions:      " + arithmeticInstructions + "\n" +
                     "General Instructions:         " + generalInstructions + "\n" +
                     "Jump Instructions:            " + jumpInstructions + "\n" +
                     "Stack Instructions:           " + stackInstructions + "\n\n";

        returnStr += "Addressing Mode Uses\n" + 
                     "--------------------\n" +
                     "Memory:                       " + immediateAddrMode + "\n" +
                     "Direct:                       " + directAddrMode + "\n" + 
                     "Indirect:                     " + indirectAddrMode + "\n" +  
                     "R-Direct:                     " + registerDirectAddrMode + "\n" +  
                     "R-Indirect:                   " + registerIndirectAddrMode + "\n" +  
                     "Index-Direct:                 " + indexDirectAddrMode + "\n" +  
                     "Index-Indirect:               " + indexIndirectAddrMode + "\n" +  
                     "Index-Offset:                 " + indexOffsetAddrMode + "\n" + 
                     "Index-Deferred:               " + indexDefferedAddrMode + "\n" + 
                     "Stack-Direct:                 " + stackDirectAddrMode + "\n" + 
                     "Stack-Indirect:               " + stackIndirectAddrMode + "\n" + 
                     "Stack-Offset:                 " + stackOffsetAddrMode + "\n" + 
                     "Stack-Index-Direct:           " + stackIndexDirectAddrMode + "\n" + 
                     "Stack-Index-Indirect:         " + stackIndexIndirectAddrMode + "\n" +
                     "Stack-Index-Offset:           " + stackIndexOffsetAddrMode + "\n" +
                     "Stack-Index-Deferred:         " + stackIndexDefferedAddrMode + "\n"; 

        currentCodeOutDis = returnStr;
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        long maxsize = 512000;

        var buffer = new byte[file.Size];
        await file.OpenReadStream(maxsize).ReadAsync(buffer);
        fileContent = System.Text.Encoding.UTF8.GetString(buffer);
        currentCodeDis = fileContent;
    }

    private async Task SaveMachineCode()
    {
        byte[] file = System.Text.Encoding.UTF8.GetBytes(currentCodeDis);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "machineCode.txt", "text/plain", file);
    }

    private async Task SaveOutput()
    {
        byte[] file = System.Text.Encoding.UTF8.GetBytes(assemblyCode);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "assemblyCode.txt", "text/plain", file);
    }

    private void OpenMachineCodeExecuter()
    {
        FrontendVariables.currentMachineCodeExecuter = currentCodeDis;
        UriHelper.NavigateTo("executer");
    }

    protected override async Task OnInitializedAsync()
    {
        StartupMethod();
    }

    void StartupMethod()
    {
        currentCodeDis = FrontendVariables.currentCodeDisassembler;
        FrontendVariables.currentCodeDisassembler = "";
    }

}

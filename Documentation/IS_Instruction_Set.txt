




// ==================================================================
// ============/  Addressing Modes  /==========================================
// ==================================================================



General Notes:
    All operands must be integers (cannot have a floating-point address)

Name                    Letters     Binary      How operand is treated          Notes
------------------------------------------------------------------------------------------------------------------
immediate               i           ----        operand                         Convert to: ADI r#, r0, imm or ADI f#, f0, imm
immediate direct        id          0000        Mem[operand]
immediate indirect      in          0001        Mem[Mem[operand]]

register                r           ----        register operand                Convert to: ADD r#, r0, r# or ADD f#, f0, f#
register direct         rd          0010        Mem[register operand]           Can only accept integer registers (cannot have a floating-point address)
register indirect       rn          0011        Mem[Mem[register operand]]      Can only accept integer registers (cannot have a floating-point address)

indexed direct          xd          0100        Mem[r7 + operand]
indexed indirect        xn          0101        Mem[Mem[r7 + operand]]
indexed offset          xo          0110        Mem[Mem[r7] + operand]
indexed deffered        xf          0111        Mem[Mem[operand] + r7]

stack direct            sd          1000        Mem[SP + operand]
stack indirect          sn          1001        Mem[Mem[SP + operand]]
stack offset            so          1010        Mem[Mem[SP] + operand]
stack deffered          sf          1011        Mem[SP + Mem[operand]]

stack indexed direct    sxd         1100        Mem[SP + r7 + operand]
stack indexed indirect  sxn         1101        Mem[Mem[SP + r7 + operand]]
stack indexed offset    sxo         1110        Mem[Mem[SP + r7] + operand]
stack indexed deffered  sxf         1111        Mem[Mem[SP + operand] + r7]
------------------------------------------------------------------------------------------------------------------





// ==================================================================
// ============/  Instruction Types  /=========================================
// ==================================================================



Legend:
    0,1:    set bits, not changed per instruction
    o:      operand bits, encode each instruction
    c:      bits to encode conditions, such as address modes and jump conditions
    i:      bits to encode immediates
    r:      primary register, often destination register
    s:      secondary register, often source 1
    t:      tertiary register, often source 2

Type    Name            Encoding                                        Purpose
-------------------------------------------------------------------------------------------------------------------------------------------------------------
00  0   r2-type         000o oooo ooss srrr                             Involves 2 Integer Registers
00  1   f2-type         001o oooo ooss srrr                             Involves 2 Floating Point Registers

01  0   r3-type         010o ooot ttss srrr                             Involves 3 Integer Registers
01  1   f3-type         011o ooot ttss srrr                             Involves 3 Floating Point Registers

10  0   rs-type²        100o ooii iiss srrr                             See note. Involves 2 Integer Registers and a Small immediate (1-16)
10  1   rs-type²        101o ooii iiss srrr                             See note. Involves 2 Integer Registers and a Small immediate (1-16)

11  0   rm-type¹        110o oooo occc crrr | iiii iiii iiii iiii       See note. 1 or 2 Registers with large immediate, possibly with addressing mode
11  1   fm-type¹        111o oooo occc crrr | iiii iiii iiii iiii       See note. 1 or 2 Registers with large immediate, possibly with addressing mode
-------------------------------------------------------------------------------------------------------------------------------------------------------------
    ¹ Note: type will interpret the 'cccc' bits according to the opcode, either as addressing mode or as a second register
    ² Note: since encoding 0 is useless for the immediate in most instructions, '0000' encodes a 16. So the range of possible immediates is [1-16].





// ==================================================================
// ============/  Instructions  /==============================================
// ==================================================================



Name                            Mnemonic    Type    Opcode                  Example                 Notes
===============================================================================================================================================================

/* ----- Process Control ------------------------------------------------------------- */

Halt                            HLT         r2      0000 0000 00.. ....     HLT
No Operation                    NOP         r2      0000 0000 01.. ....     NOP

Call procedure                  CAL         r2      0000 0000 10.. ....     CAL proc                Push IP; Load IP with proc; Jump
Return from procedure           RET         r2      0000 0000 11.. ....     RET                     Pop IP; Jump


/* ----- Memory Management ----------------------------------------------------------- */

Load Word                       LDW         rm      1100 0000 0ccc crrr     LDW r1, 15, id
Load Low Byte                   LDL         rm      1100 0000 1ccc crrr     LDL r1, 15, id
Load High Byte                  LDH         rm      1100 0001 0ccc crrr     LDH r1, 15, id

Store Word                      STW         rm      1100 0001 1ccc crrr     STW r1, 15, id
Store Low Byte                  STL         rm      1100 0010 0ccc crrr     STL r1, 15, id
Store High Byte                 STH         rm      1100 0010 1ccc crrr     STH r1, 15, id

Load Float                      LDF         fm      1110 0000 0ccc crrr     LDF f1, 15, id          Opcode matches LDW except type bits
Store Float                     STF         fm      1110 0001 1ccc crrr     STF f1, 15, id          Opcode matches STW except type bits

Load Effective Address          LEA         rm      1100 0011 0... .rrr     LEA r1, label           r1 = address that label is mapped to

Push Word                       PSW         r2      0000 0001 00.. .rrr     PSW r1                  Stack pointer auto adjusted
Push Low Byte                   PSL         r2      0000 0001 01.. .rrr     PSL r1                  "     "       "    "
Push High Byte                  PSH         r2      0000 0001 10.. .rrr     PSH r1                  "     "       "    "

Pop Word                        PPW         r2      0000 0001 11.. .rrr     PPW r1                  Stack pointer auto adjusted
Pop Low Byte                    PPL         r2      0000 0010 00.. .rrr     PPL r1                  "     "       "    "
Pop High Byte                   PPH         r2      0000 0010 01.. .rrr     PPH r1                  "     "       "    "

Push Float                      PSF         f2      0010 0001 00.. .rrr     PSF f1                  Opcode matches PSW except type bits
Pop Float                       PPF         f2      0010 0001 11.. .rrr     PPF f1                  Opcode matches PPW except type bits


/* ----- Register Management --------------------------------------------------------- */

Copy into Reg, from Reg         CRR         r2      /*    Use MOV    */     CRR r1, r2              Converts to 'MOV r1, r2'
Copy into Float, from Float     CFF         f2      /*    Use MOV    */     CFF f1, f2              Converts to 'MOV f1, f2'
Copy into Reg, from Float       CRF         r2      0000 0010 10tt tsss     CRF r1, f1              Truncates to integer
Copy into Float, from Reg       CFR¹        f2      0010 0010 10tt tsss     CFR f1, r1              Opcode matches CRF except type bits. See note.

Exchange registers              XCH         r2/f2   00?0 0010 11tt tsss     XCH r1, r2              Swaps contents of both registers

Extend low byte into word       EXT         r2      0000 0011 00tt tsss     EXT r1, r2              Sign extends r2<8..0> into r1


/* ----- Pure Register Mathematics --------------------------------------------------- */

Add                             ADD         r3/f3   01?0 000t ttss srrr     ADD r1, r2, r3
Add with Carry                  ADC         r3/f3   01?0 001t ttss srrr     ADC r1, r2, r3
Subtract                        SUB         r3/f3   01?0 010t ttss srrr     SUB r1, r2, r3
Subtract with Borrow            SBB         r3/f3   01?0 011t ttss srrr     SBB r1, r2, r3
Multiply                        MUL²        r3/f3   01?0 100t ttss srrr     MUL r1, r2, r3          See note.
Divide                          DIV²        r3/f3   01?0 101t ttss srrr     DIV r1, r2, r3          See note.

Negate                          NEG         r2/f2   00?0 0011 01tt tsss     NEG r1, r2
Bitwise Not                     NOT         r2      0000 0011 10tt tsss     NOT r1, r2
Bitwise And                     AND         r3      0100 110t ttss srrr     AND r1, r2, r3
Bitwise Or                      ORR         r3      0100 111t ttss srrr     ORR r1, r2, r3
Bitwise Xor                     XOR         r3      0101 000t ttss srrr     XOR r1, r2, r3

Arith. Shift Left               ASL         r3      0101 001t ttss srrr     ASL r1, r2, r3
Arith. Shift Right              ASR         r3      0101 010t ttss srrr     ASR r1, r2, r3
Logic Shift Left                LSL         r3      /*    Use ASL    */     LSL r1, r2, r3          Converts to 'ASL r1, r2, r3'
Logic Shift Right               LSR         r3      0101 011t ttss srrr     LSR r1, r2, r3
Rotate Left                     RTL         r3      0101 100t ttss srrr     RTL r1, r2, r3
Rotate Right                    RTR         r3      0101 101t ttss srrr     RTR r1, r2, r3
Rotate with Carry Left          RCL         r3      0101 110t ttss srrr     RCL r1, r2, r3
Rotate with Carry Right         RCR         r3      0101 111t ttss srrr     RCR r1, r2, r3

Floor                           FLR         f2      0010 0000 00tt tsss     FLR f1, f2
Ceiling                         CEL         f2      0010 0000 01tt tsss     CEL f1, f2
Round                           RND         f2      0010 0000 10tt tsss     RND f1, f2
Absolute Value                  ABS³        r2/f2   00?0 0011 11tt tsss     ABS f1, f2              See note.

Bit Scan Forward                BSF         r2      0000 0100 00tt tsss     BSF r1, r2
Bit Scan Reverse                BSR         r2      0000 0100 01tt tsss     BSR r1, r2


/* ----- Small Immediate Mathematics ------------------------------------------------- */

Increment                       INC         rs      1000 00ii iiss srrr     INC r1, r2              Defaults to adding 1: r1 = r2 + 1
Decrement                       DEC         rs      1000 01ii iiss srrr     DEC r1, r2, 4           Can specify amount. r1 = r2 - 4

Shift Arithmetically Left       SAL         rs      1000 10ii iiss srrr     SAL r1, r2
Shift Arithmetically Right      SAR         rs      1000 11ii iiss srrr     SAR r1, r2, 4
Shift Logically Left            SLL         rs      /*    Use SAL    */     SLL r1, r2
Shift Logically Right           SLR         rs      1001 00ii iiss srrr     SLR r1, r2, 4
Rotate Left                     RTL         rs      1001 01ii iiss srrr     RTL r1, r2
Rotate Right                    RTR         rs      1001 10ii iiss srrr     RTR r1, r2, 4
Rotate with Carry Left          RCL         rs      1001 11ii iiss srrr     RCL r1, r2
Rotate with Carry Right         RCR         rs      1010 00ii iiss srrr     RCL r1, r2, 4


/* ----- Large Immediate Mathematics ------------------------------------------------- */

Add Immediate                   ADI         rm/fm   11?0 0011 1.cc crrr     ADI r1, r2, 1024        'cccc' here would be '0010' to encode r2
Subtract Immediate              SBI         rm/fm   11?0 0100 0.cc crrr     SBI r1, r2, 1024
Add Immediate with Carry        AIC         rm/fm   11?0 0100 1.cc crrr     AIC r1, r2, 1024
Subtract Immediate with Borrow  SIB         rm/fm   11?0 0101 0.cc crrr     SIB r1, r2, 1024
And Immediate                   ANI         rm/fm   11?0 0101 1.cc crrr     ANI r1, r2, 1024
Or Immediate                    ORI         rm/fm   11?0 0110 0.cc crrr     ORI r1, r2, 1024
Xor Immediate                   XRI         rm/fm   11?0 0110 1.cc crrr     XRI r1, r2, 1024


/* ----- Decision Making ------------------------------------------------------------- */

Compare                         CMP         r2/f2   00?0 0100 10tt tsss     CMP r1, r2
Test                            TST         r2/f2   00?0 0100 11tt tsss     TST r1, r2

Set Sign flag                   STS         r2      0000 0101 00.. ....     STS
Clear Sign flag                 CLS         r2      0000 0101 01.. ....     CLS
Set Parity flag                 STP         r2      0000 0101 10.. ....     STP
Clear Parity flag               CLP         r2      0000 0101 11.. ....     CLP
Set Overflow flag               STO         r2      0000 0110 00.. ....     STO
Clear Overflow flag             CLO         r2      0000 0110 01.. ....     CLO
Set Carry flag                  STC         r2      0000 0110 10.. ....     STC
Clear Carry flag                CLC         r2      0000 0110 11.. ....     CLC
Set Zero flag                   STZ         r2      0000 0111 00.. ....     STZ
Clear Zero flag                 CLZ         r2      0000 0111 01.. ....     CLZ

Load flags into low byte        LFL         r2      0000 0111 10.. .rrr     LFL r1                  r1<8..0> = 000SPOCZ
Store low byte into flags       SFL         r2      0000 0111 11.. .rrr     SFL r1                  000SPOCZ = r1<8..0>

Move (unconditional)            MOV         r2/f2   00?0 1000 00ss srrr     MOV r1, r2

Move if Equal                   MEQ         r2/f2   /*    Use MYZ    */     MEQ r1, r2
Move if Not Equal               MNE         r2/f2   /*    Use MNZ    */     MNE r1, r2

Move if Less Than               MLT         r2/f2   00?0 1000 01ss srrr     MLT r1, r2
Move if Greater Than            MGT         r2/f2   00?0 1000 10ss srrr     MGT r1, r2
Move if Less or Equal           MLE         r2/f2   00?0 1000 11ss srrr     MLE r1, r2
Move if Greater or Equal        MGE         r2/f2   00?0 1001 00ss srrr     MGE r1, r2

Move if Above Than              MAT         r2/f2   00?0 1001 01ss srrr     MAT r1, r2
Move if Below Than              MBT         r2/f2   /*    Use MYC    */     MBT r1, r2
Move if Above or Equal          MAE         r2/f2   /*    Use MNC    */     MAE r1, r2
Move if Below or Equal          MBE         r2/f2   00?0 1001 10ss srrr     MBE r1, r2

Move if (Yes) Sign flag         MYS         r2/f2   00?0 1001 11ss srrr     MYS r1, r2
Move if not (No) Sign flag      MNS         r2/f2   00?0 1010 00ss srrr     MNS r1, r2
Move if (Yes) Parity flag       MYP         r2/f2   00?0 1010 01ss srrr     MYP r1, r2
Move if not (No) Parity flag    MNP         r2/f2   00?0 1010 10ss srrr     MNP r1, r2
Move if (Yes) Overflow flag     MYO         r2/f2   00?0 1010 11ss srrr     MYO r1, r2
Move if not (No) Overflow flag  MNO         r2/f2   00?0 1011 00ss srrr     MNO r1, r2
Move if (Yes) Carry flag        MYC         r2/f2   00?0 1011 01ss srrr     MYC r1, r2
Move if not (No) Carry flag     MNC         r2/f2   00?0 1011 10ss srrr     MNC r1, r2
Move if (Yes) Zero flag         MYZ         r2/f2   00?0 1011 11ss srrr     MYZ r1, r2
Move if not (No) Zero flag      MNZ         r2/f2   00?0 1100 00ss srrr     MNZ r1, r2
Move (unconditional)            MOV         r2/f2   00?0 1100 01ss srrr     MOV r1, r2

Jump (unconditional)            JMP         rm/fm   11?0 0111 0.cc crrr     JMP Label

Jump if Equal                   JEQ⁴        rm/fm   /*    Use JYZ    */     JEQ r1, r2, Label       See note.
Jump if Not Equal               JNE⁴        rm/fm   /*    Use JNZ    */     JNE r1, r2, Label       "   "

Jump if Less Than               JLT⁴        rm/fm   11?0 0111 1.cc crrr     JLT r1, r2, Label       "   "
Jump if Greater Than            JGT⁴        rm/fm   11?0 1000 0.cc crrr     JGT r1, r2, Label       "   "
Jump if Less or Equal           JLE⁴        rm/fm   11?0 1000 1.cc crrr     JLE r1, r2, Label       "   "
Jump if Greater or Equal        JGE⁴        rm/fm   11?0 1001 0.cc crrr     JGE r1, r2, Label       "   "

Jump if Above Than              JAT⁴        rm/fm   11?0 1001 1.cc crrr     JAT r1, r2, Label       "   "
Jump if Below Than              JBT⁴        rm/fm   /*    Use JYC    */     JBT r1, r2, Label       "   "
Jump if Above or Equal          JAE⁴        rm/fm   /*    Use JNC    */     JAE r1, r2, Label       "   "
Jump if Below or Equal          JBE⁴        rm/fm   11?0 1010 0.cc crrr     JBE r1, r2, Label       "   "

Jump if (Yes) Sign flag         JYS⁴        rm/fm   11?0 1010 1.cc crrr     JYS r1, r2, Label       "   "
Jump if not (No) Sign flag      JNS⁴        rm/fm   11?0 1011 0.cc crrr     JNS r1, r2, Label       "   "
Jump if (Yes) Parity flag       JYP⁴        rm/fm   11?0 1011 1.cc crrr     JYP r1, r2, Label       "   "
Jump if not (No) Parity flag    JNP⁴        rm/fm   11?0 1100 0.cc crrr     JNP r1, r2, Label       "   "
Jump if (Yes) Overflow flag     JYO⁴        rm/fm   11?0 1100 1.cc crrr     JYO r1, r2, Label       "   "
Jump if not (No) Overflow flag  JNO⁴        rm/fm   11?0 1101 0.cc crrr     JNO r1, r2, Label       "   "
Jump if (Yes) Carry flag        JYC⁴        rm/fm   11?0 1101 1.cc crrr     JYC r1, r2, Label       "   "
Jump if not (No) Carry flag     JNC⁴        rm/fm   11?0 1110 0.cc crrr     JNC r1, r2, Label       "   "
Jump if (Yes) Zero flag         JYZ⁴        rm/fm   11?0 1110 1.cc crrr     JYZ r1, r2, Label       "   "
Jump if not (No) Zero flag      JNZ⁴        rm/fm   11?0 1111 0.cc crrr     JNZ r1, r2, Label       "   "

Loop                            LOP⁵        rm/fm   11?0 1111 1.cc crrr     LOP r1, Label       See note.
===============================================================================================================================================================
    ¹ Note: CFR needs to econvert integer into floating point, but floating point cannot hold all values integer can. May throw errors.


    ² Note: Muliplication and Division are complicated.

        - Muliplication: MUL r2, r3, r4
            Computes the value of r3 * r4. Stores the lower 16 bits in r2, and the upper 16 bits in the previous register, so r1.
            Using r1 as the destination discards those high bits, since r0 cannot be written to.
            R0 cannot be picked as a destination

            Signed and unsigned integer multiplication are different: set the sign bit to perform signed multiplication, clear it to perform unsigned.

                Signed:     0xFFFF * 0xFFFF   =>   -1 * -1         =>            1   =>   0x00000001
                Unsigned:   0xFFFF * 0xFFFF   =>   65535 * 65535   =>   4294836225   =>   0xFFFE0001

        - Division: DIV r2, r3, r4
            Computes the value of r3 / r4. Stores the result in r2, and the remainder in the previous register, so r1.
            Using r1 as the destination discards the remainder, since r0 cannot be written to.
            R0 cannot be picked as a destination

            Signed and unsigned integer division are different: set the sign bit to perform signed division, clear it to perform unsigned.

                Signed:
                    Non-integer results are truncated towards 0.
                    The remainder always has the same sign as the dividend (left-hand side).
                    The absolute value of the remainder is always smaller than the absolute value of the divisor (right-hand side).

                    0x0005 / 0x0003   =>   +5 / +3   =>   +1.67 r +2   =>   +1 r +2
                    0xFFFB / 0x0003   =>   -5 / +3   =>   -1.67 r -2   =>   -1 r -2
                    0x0005 / 0xFFFD   =>   +5 / -3   =>   -1.67 r +2   =>   -1 r +2
                    0xFFFB / 0xFFFD   =>   -5 / -3   =>   +1.67 r -2   =>   +1 r -2

                Unsigned:
                    Just signed division but only with positive operands

                    0x0005 / 0x0003   =>   +    5 / +    3   =>   +    1.67 r +    2   =>   +    1 r +2
                    0xFFFB / 0x0003   =>   +65531 / +    3   =>   +21843.67 r +    2   =>   +21843 r +2
                    0x0005 / 0xFFFD   =>   +    5 / +65533   =>   +    0.00 r +    5   =>   +    0 r +5
                    0xFFFB / 0xFFFD   =>   +65531 / +65533   =>   +    0.00 r +65531   =>   +    0 r +65531


    ³ Note: ABS - there are more negative numbers than there are positive numbers (because of zero). So
                ABS(0x8000) throws an error. NEG(0x8000) = 0x8000, so no problems there. There is no positive
                counterpart to 0x8000 in signed notation.


    ⁴ Note: All jumps use the two given registers to determine whether they should take the jump or not. The second register
                is subtracted from the first (as in a CMP instruction) and the resulting flags are considered.

        - WARNING: The jump instruction does not update the flags register. It uses temporary flags to determine whether to jump.

        - If the two given registers are BOTH r0 or BOTH f0, then there is no point checking. Instead, to improve functionality,
            the jump will consider the actual flags register (but not change it!) when determining whether to take the jump.


    ⁵ Note: LOP r1, Label

        - Pseudocode: r1 = r1 - 1; if (r1 != 0) { jump to label }

        - WARNING: The LOP instruction does not update the flags register. It uses temporary flags to determine whether to jump.





























